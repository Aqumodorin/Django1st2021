WEBVTT

00:05.020 --> 00:06.870
Hello everyone and welcome to part one.

00:06.910 --> 00:14.140
Javascript basics and this lecture are going to be going to our browser Google Chrome and then opening

00:14.140 --> 00:18.150
up our consul and walking through just the very basics of javascript.

00:18.150 --> 00:24.190
Things such as basic data types and a few basic methods are going to jump through my browser now to

00:24.190 --> 00:25.050
get started.

00:25.290 --> 00:31.330
OK here I am at my browser I'm just set a new empty tab and I've also gone Incognito to make sure I

00:31.330 --> 00:36.250
don't get any javascript alerts if I'm logged into G-mail and I would suggest you do the same if you're

00:36.250 --> 00:42.910
using a Gmail account but what you're going to do is anywhere on the page right click and then go all

00:42.910 --> 00:45.320
the way down to where it says inspects.

00:45.490 --> 00:50.920
Click on that and you should see something like this probably not a zoomed in as mine so more likely

00:50.920 --> 00:52.720
you'll see something that looks like this.

00:52.810 --> 00:58.060
Then you can click on cons. And you should see the consul here for your browser and this is where we

00:58.060 --> 01:03.910
can directly type in javascript code and see how the browser interprets it and executes it.

01:04.300 --> 01:08.420
Let's start off with the hello world of javascript which is an alert.

01:08.640 --> 01:13.720
So we call alert which is a function and then you pasan a string.

01:14.080 --> 01:16.720
So a string is going to start off with a set of quotes.

01:16.720 --> 01:17.870
Here we have double quotes.

01:18.070 --> 01:19.500
And then whatever string you want to do.

01:19.540 --> 01:23.350
So in our case it's going to be something like Hello world.

01:23.380 --> 01:27.790
And you can see I've actually typed this before which is why the javascript conses kind of helped me

01:27.790 --> 01:28.440
out there.

01:28.750 --> 01:34.160
But I'm going to hit enter and we should see a little pop up and here at the top of the page I see new

01:34.160 --> 01:39.090
tab says hello world and there's a little click here that says prevent this page from creating additional

01:39.090 --> 01:40.000
dialogs.

01:40.080 --> 01:41.780
Do not check that box.

01:41.820 --> 01:44.250
Otherwise you won't be able to see any more of your alerts.

01:44.250 --> 01:45.440
So then click OK.

01:46.920 --> 01:51.750
And we get undefined here and will be explaining a lot more about function input and output and how

01:51.750 --> 01:53.450
that all works for now.

01:53.470 --> 01:57.080
Congratulations you've written your very first line of javascript code.

01:57.090 --> 01:59.970
Let's continue on by talking about basic data types.

02:00.950 --> 02:05.810
So first before we actually start that I want to show you how you can write a comment in javascript

02:05.810 --> 02:12.300
and a comment and Javascript is just two forward slashes and then anything beyond this.

02:12.440 --> 02:18.980
So anything here is a comments and if I hit enter here basically nothing is going to be executed because

02:18.980 --> 02:20.370
that was all it comments.

02:20.660 --> 02:24.970
So right now let's start off with basic data types.

02:26.050 --> 02:26.290
OK.

02:26.290 --> 02:34.150
The first basic data type are numbers and numbers can be integers such as 10 floating point numbers

02:34.220 --> 02:41.260
maybe a like twenty point two which means it has a decimal and even things like negative numbers so

02:41.260 --> 02:44.220
negative thirteen point four or something.

02:44.230 --> 02:50.320
Note that javascript unlike some other languages treat treats these all the same as numbers.

02:50.320 --> 02:55.900
So regardless if it's a floating point with decimal a whole integer or a negative number they all are

02:55.900 --> 02:57.790
treated as numbers in javascript.

02:57.790 --> 03:02.390
There's no distinction between them at least for our very basic use cases.

03:02.390 --> 03:08.220
We don't need to worry about that then next there are strings.

03:08.330 --> 03:11.950
The strings are basically strings wrapped in quotes.

03:11.960 --> 03:13.190
So we've already seen one.

03:13.310 --> 03:21.010
We've seen hello world so here we have the string hello world and it gets output and then we can also

03:21.010 --> 03:23.000
even wrap digits.

03:23.010 --> 03:24.760
But note here the difference.

03:24.760 --> 03:30.190
If I wrap this number 10 in quotes it now becomes a string instead of an actual number.

03:30.190 --> 03:36.510
Now we'll talk a lot more also about how javascript compares strings like this to a number like this.

03:36.520 --> 03:39.900
It's unlike some other languages so I have to keep an eye out for that.

03:40.360 --> 03:42.110
OK so those are strings.

03:42.310 --> 03:46.090
And up next I want to show you booleans.

03:46.230 --> 03:51.300
So if you have encountered booleans from other programming languages there are basically logical values

03:51.300 --> 03:56.480
that can stand for true or false and in javascript's it's the lower case.

03:56.490 --> 04:03.490
True or all lowercase false and those are the booleans and there's two more things I want to show you

04:03.490 --> 04:06.940
which are undefined and NULL.

04:07.240 --> 04:10.950
And we'll talk again a lot more about these in a future lecture.

04:10.940 --> 04:16.540
But I just want you to be aware that undefined the null are not exactly the same thing but they are

04:16.540 --> 04:19.600
available as basic data types in javascript's.

04:19.610 --> 04:23.440
OK let's take a step back and focus in on numbers.

04:23.470 --> 04:27.440
So those were over here and blue syntax highlighting numbers.

04:27.480 --> 04:32.890
We can actually use javascript as a basic calculator but before we do that I want to show you how you

04:32.890 --> 04:35.420
can clear your consul to clear cons..

04:35.440 --> 04:42.520
Just type in clear and then close parentheses at the end of that enter and the console will be cleared

04:42.520 --> 04:42.990
for you.

04:44.000 --> 04:49.910
OK so javascript as a basic calculator can do addition so I can say things like two plus two.

04:49.990 --> 04:57.050
You see a response for I can do subtraction five minus 1 multiplication three times two.

04:57.070 --> 04:59.400
That's an asterix for multiplication there.

04:59.590 --> 05:04.720
I can do division for instance 10 divided by two using five.

05:04.960 --> 05:11.500
And what happens if I do two divided by five it gives me 0.4 other programming languages sometimes will

05:11.500 --> 05:13.840
actually give you the decimal amount.

05:13.840 --> 05:15.990
Javascript does do true division here.

05:16.030 --> 05:20.260
So 2 divided by 5 does give you the correct answer of 0.4.

05:20.260 --> 05:23.610
Then if we wanted to exponents that's two sets of Asterix.

05:23.620 --> 05:29.860
So for instance if I wanted to do the power of four that's going to be Asterix Asterix four and then

05:29.860 --> 05:34.680
that equals 16 which is two times two times two times two or two power of four.

05:35.110 --> 05:39.700
And then the last mathematical operation which you may or may not be familiar with the Pindi how new

05:39.760 --> 05:46.570
your programming is what's known as the Maggiolo or modify function or really operations not really

05:46.600 --> 05:47.300
function.

05:47.530 --> 05:52.000
And basically what this does is it returns the remainder of a division.

05:52.000 --> 05:59.250
So for example if I say 15 divided by 14 and hit enter I get 1 point 0 7 et cetera.

05:59.260 --> 06:00.620
Some very large decimal.

06:00.760 --> 06:06.880
But if I were to think about this in terms of remainder I would know that 15 divided by 14 is 14.

06:06.880 --> 06:08.670
Remainder 1.

06:08.680 --> 06:14.470
Now if I wanted some mathematical operation to only return that remainder that can be shown as the mod

06:14.920 --> 06:21.000
operation or the modular operation which in most programming programming languages it's shown as a percent

06:21.010 --> 06:21.980
sign.

06:22.210 --> 06:28.490
So 15 maade 14 returns one because it's 14 remainder 1.

06:28.750 --> 06:30.780
Let's show you another example.

06:30.850 --> 06:35.110
For instance 6 maade to return 0.

06:35.140 --> 06:38.610
And that's because 2 goes into six evenly three times.

06:38.710 --> 06:40.780
So three remainder zero.

06:40.780 --> 06:47.890
Now if I do something like 6 model four I get remainder two because it's going to be for remainder two

06:48.100 --> 06:49.000
to get six.

06:49.090 --> 06:53.980
So again this model function this operation just gives you back the remainder.

06:53.980 --> 06:54.490
OK.

06:54.700 --> 06:59.440
So we discussed numbers and how to treat javascript using a basic calculator.

06:59.560 --> 07:01.840
Let's clear our consul again.

07:02.120 --> 07:08.400
And now let's talk about strings and some very basic operations that you can do strings or javascript.

07:08.570 --> 07:16.230
So strings are just sequences of characters in each element or character has an indexed position.

07:16.420 --> 07:21.360
So let's start for strain that just says Django is cool.

07:22.590 --> 07:28.280
And I can actually concatenate strings together and concatenate means just bring together so I can say

07:28.280 --> 07:30.110
something like Django

07:32.840 --> 07:40.320
and I concatenate with plus is super cool.

07:41.420 --> 07:42.390
It enter.

07:42.430 --> 07:44.190
And then I see Django is super cool.

07:44.210 --> 07:46.580
But look what happened here on that concatenation.

07:46.580 --> 07:52.650
There's no space between Django and is because there was no space at the end of Django or at the beginning

07:52.750 --> 07:53.660
is there.

07:53.680 --> 08:00.030
So if I want to concatenate these two strings to make sense I can put a space there for is.

08:00.190 --> 08:05.680
And then when I concatenate those two together both the plus sign I see Django is super cool so far

08:05.680 --> 08:07.070
pretty basic stuff.

08:07.150 --> 08:11.700
If I grab the actual length of a string it called the length attribute.

08:11.770 --> 08:18.670
So I say something like Django and then call thaw length off of that string and you can see that the

08:18.670 --> 08:21.270
consul actually helps you out some autocomplete.

08:21.550 --> 08:26.650
And then here I can see there are six elements or six characters in the sequence which is the string.

08:26.650 --> 08:28.810
One two three four five six.

08:28.810 --> 08:29.820
Great.

08:29.890 --> 08:38.830
And then we can also check if whitespace counts by saying something like X Space X length and you see

08:38.830 --> 08:39.430
we get three.

08:39.430 --> 08:40.920
So whitespace also counts.

08:40.960 --> 08:43.160
It's going to count those spaces.

08:43.180 --> 08:47.210
Now there's also escape characters and strings that are really common.

08:47.650 --> 08:58.990
For example if I say something like Hello backslash and starts a new line and then hit enter here I

08:58.990 --> 09:04.350
can see that this special escape character stands for beginning a new line.

09:04.750 --> 09:11.410
So hello and then I start a new line with backslash and and then everything else goes on a new line.

09:11.420 --> 09:13.580
Another escape character is tab.

09:13.930 --> 09:16.090
So I can say hello backslash.

09:16.100 --> 09:24.030
See for TAB give me a tab and this will insert a tab essentially just for spaces there.

09:24.550 --> 09:27.780
And then finally I can also do quotes.

09:27.800 --> 09:44.220
I can say hello and then I will say quotes back slash enter and this is just a way to input what's inside

09:44.310 --> 09:50.610
of a javascript strings I only make that probably a little more clear by not using the word quotes there

09:50.700 --> 10:00.660
but it's a backslash quote and then I can say something like jelly and I can see that the double quote

10:00.660 --> 10:02.020
is now inside the string.

10:02.040 --> 10:06.420
And the reason you would need an escape character is if he didn't have that backslash there for the

10:06.420 --> 10:12.450
escape javascript would think that you want it to just end the actual string right there at that first

10:12.540 --> 10:13.410
double quote.

10:13.620 --> 10:17.880
But instead if you want to escape it and actually have quotes inside you can use that escape character

10:17.940 --> 10:23.580
so that's useful if you're trying to say something like She said quote While the law and quote and then

10:23.580 --> 10:25.200
finish off the string.

10:25.440 --> 10:30.780
All right then finally I want to talk about actually indexing individual characters or elements.

10:31.020 --> 10:33.980
So indexing starts at zero.

10:33.990 --> 10:40.680
So if I have hello and I want to grab a certain character off of that string based off of its index

10:40.680 --> 10:45.600
location for instance I want to grab H.

10:45.810 --> 10:47.810
Well that starts at index 0.

10:47.850 --> 10:48.510
So if I do.

10:48.510 --> 10:49.140
Hello.

10:49.350 --> 10:55.570
And then with square brackets and put a zero there I get H-back OK before we continue on.

10:55.570 --> 10:59.170
Let's see a few more examples of indexing with a string.

10:59.180 --> 11:05.990
So if I have a string again hello and I want to grab the letter O from this will I just have to count

11:06.190 --> 11:07.670
starting with index 0.

11:08.000 --> 11:11.370
So it's going to be aitches 0 is 1.

11:11.540 --> 11:14.640
The first L is to the second Ellas 3.

11:14.900 --> 11:20.160
And then the 0 is the index for and it returns.

11:20.180 --> 11:24.650
Oh and we're going to learn a lot more about indexing strings later on.

11:24.860 --> 11:35.640
But what I want you to do is take a random string maybe something like look at the dog and then see

11:35.640 --> 11:40.850
if you can through indexing calls grab the letter D from this.

11:40.980 --> 11:47.150
So pause the video see what number you have to provide to grab the letter D just to practice.

11:47.180 --> 11:47.570
OK.

11:47.610 --> 11:48.810
So hopefully you're able to get it.

11:48.810 --> 11:49.300
Let's see.

11:49.300 --> 11:56.930
0 1 2 3 4 5 6 7 8 9 10 11 12 and there's the letter D.

11:57.200 --> 11:58.190
OK.

11:58.410 --> 12:06.420
Now let's continue on by talking about variables going to clear the cons. And let's talk about variables.

12:07.490 --> 12:08.670
In javascript.

12:08.900 --> 12:13.730
So the general form of variables in javascript look something like this.

12:13.730 --> 12:20.510
You say the keyword they are then you have the variable name and then you're going to say it's equal

12:20.510 --> 12:24.640
to whatever you want the actual value to be and then a semi-colon till it.

12:24.640 --> 12:25.540
Javascript no.

12:25.550 --> 12:30.860
That you're done in javascript is actually really flexible these days on what has the end of a semi-colon

12:31.130 --> 12:33.050
and what doesn't have the end of a semi-colon.

12:33.050 --> 12:34.280
For almost all things.

12:34.280 --> 12:39.200
Now you actually don't need the semi-colon anymore but we'll keep putting it into place and we'll talk

12:39.200 --> 12:41.220
about it a little more in a future lecture.

12:41.720 --> 12:43.370
But that's the very basic format.

12:43.370 --> 12:45.480
So let's actually get some practice.

12:45.550 --> 12:48.170
I'm going to make a variable called bank account.

12:49.050 --> 12:54.570
And unlike some other programming languages javascript uses camel case and with camel case means is

12:54.840 --> 13:00.780
if you have multiple words in a variable name the next word that you put in is going to have a capital

13:00.780 --> 13:02.120
letter.

13:02.140 --> 13:07.940
So we see bank next word has a capital letter and if I want to add something else this maybe the city

13:07.960 --> 13:13.420
was in I would then put another capital letter but another capital letter etc..

13:14.640 --> 13:16.980
So that's what it looks like Swiss bank account.

13:17.200 --> 13:21.510
And then I would say is equal to 100 semi colon.

13:21.520 --> 13:26.830
So now I have a variable bank account which means if I actually call bank account I'll get back the

13:26.860 --> 13:28.980
number or value I assigned to it.

13:29.410 --> 13:38.010
So then let's make a variable called deposit and we'll set it equal to 15.

13:38.050 --> 13:40.900
And now let's actually do some logic with this.

13:40.900 --> 13:51.340
So I will say variable total is equal to my accounts plus my deposit and looks like it needs to be in

13:51.340 --> 13:52.090
my bank account.

13:52.090 --> 13:55.290
So sorry about that bank account plus deposit.

13:55.330 --> 13:56.170
There it is.

13:56.350 --> 14:00.880
So we saw we have an error here account is not fine because I never defined something called account

14:01.240 --> 14:03.130
only to find something called bank account.

14:03.130 --> 14:09.440
So now here I see variable totalistic equal to bank account plus deposit so if I show my total I get

14:09.440 --> 14:11.670
150 100 plus 50.

14:12.170 --> 14:13.040
OK.

14:13.040 --> 14:16.580
So let's show a couple more examples of variables.

14:16.580 --> 14:18.930
Want to clear my cons..

14:19.140 --> 14:25.080
Let's say I create a variable called a greeting and this one's going to be a string now I'll say something

14:25.080 --> 14:26.250
like.

14:26.610 --> 14:30.490
Welcome back Colin.

14:30.510 --> 14:35.560
And then I'm going to make another variable called name and you should go ahead and put your name here.

14:37.270 --> 14:41.810
Or put in Jose and then we're going to say an alert.

14:41.930 --> 14:48.020
So we should see a prompt come up and I'm going to do a greeting Plus remember we can concatenate strings

14:49.100 --> 14:53.520
name hit enter and now a seat says welcome back Jose.

14:53.550 --> 14:55.270
On the very top here.

14:55.320 --> 14:55.900
Great.

14:56.190 --> 15:02.400
So if I get a variable such as we are in I don't ever define it.

15:02.490 --> 15:06.500
So let's do that something like my variable and I hit enter.

15:06.540 --> 15:07.900
I get undefined.

15:08.190 --> 15:13.260
So undefined means you created something but you never actually defined it.

15:13.510 --> 15:14.120
A No.

15:14.130 --> 15:15.030
On the other hand.

15:15.120 --> 15:21.660
So for instance if I make a variable called bonus and assign it to the keyword null that's going to

15:21.660 --> 15:23.430
be actually nothing that you said.

15:23.550 --> 15:29.390
And that's really the difference between null and undefined undefined means something was created.

15:29.490 --> 15:30.950
But it was never actually the find.

15:30.960 --> 15:33.640
So this variable exists but it was never defined.

15:33.960 --> 15:36.990
In the case of my variable No.

15:36.990 --> 15:42.470
On the other hand means that you're actually setting nothing to this variable on purpose.

15:42.510 --> 15:47.850
So here we have something as undefined created but never the find in the case of this variable called

15:47.850 --> 15:48.600
bonus.

15:48.660 --> 15:51.440
We actually assigned it nothing or no.

15:51.510 --> 15:55.250
So it is defined as Nil instead of just being undefined.

15:55.290 --> 16:00.390
Now don't worry too much right now that all of these actions output undefined.

16:00.490 --> 16:05.750
That just means that there was nothing to output for all the lines of code we were writing.

16:05.800 --> 16:11.100
Now before we end this lecture I want to show you just a few basic javascript methods that we talk about.

16:11.230 --> 16:12.370
We already know alert.

16:12.490 --> 16:19.390
But just to reiterate alert is going to alert and pop up something in the browser so it will say Alert

16:20.740 --> 16:28.610
Hey enter and it alerts appear and we'll be using those a lot to check our work later on in the section

16:28.610 --> 16:29.730
of the course.

16:29.740 --> 16:33.320
The other thing I want to show you is actually outputting something to the console.

16:33.340 --> 16:38.060
So a lot of the stuff we've been doing has never been outputting things to the console phone output

16:38.090 --> 16:39.120
something to the console.

16:39.140 --> 16:44.260
I can use console that log and then whenever I want to output.

16:44.260 --> 16:56.120
So let's say hey I'm in the console Let's enter what we see here that says hey I'm in the consul and

16:56.130 --> 16:56.520
that's me.

16:56.580 --> 16:58.700
I'll put something to the consul.

16:58.870 --> 17:05.700
And then finally we have prompt so prompt is an actual key.

17:05.700 --> 17:15.740
So I will say we'll start off with just prompt and we'll say enter something enter and at the very top

17:15.740 --> 17:19.840
of the page I'll say enter something and he can just enter whatever.

17:19.910 --> 17:20.680
OK.

17:20.810 --> 17:22.360
And we see the output here.

17:22.670 --> 17:28.080
If you want to say this is a variable you can do something like the.

17:28.190 --> 17:30.500
Age is equal to prompt.

17:30.860 --> 17:40.200
And then we'll say enter your age enter and up here it says enter your age so we can enter age let's

17:40.210 --> 17:43.670
say where 90 years old with the good life.

17:43.710 --> 17:44.740
OK.

17:44.800 --> 17:50.680
And now Ill say undefined but if I call age again it gives me back 90 and note that it gives it back

17:50.680 --> 17:52.320
to me as a string.

17:52.690 --> 17:53.390
OK.

17:53.500 --> 17:56.170
So we covered a lot here but it was all the basics.

17:56.170 --> 17:58.800
Hopefully this didn't seem too complicated.

17:58.960 --> 18:03.340
I know it's a lot of stuff right now so if you need a review you can always check out the javascript

18:03.340 --> 18:09.370
basics that javascript that's under javascript level 1 folder so you can actually go and practice on

18:09.370 --> 18:12.400
your own the various commands that we did in this lecture.

18:12.470 --> 18:15.610
OK thanks everyone and I'll see you in the next lecture.

18:15.640 --> 18:18.850
Where are we going to be continuing our discussion of the basics of javascript.
