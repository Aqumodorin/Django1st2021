WEBVTT

00:05.000 --> 00:11.230
Hello everyone and welcome to part three we're going to be discussing python lists lists our pythons

00:11.240 --> 00:15.500
form of arrays and they behave very similarly to a javascript array.

00:15.800 --> 00:20.120
Well we're going to do is begin to understand the important features of Python by jumping to the editor

00:20.180 --> 00:26.430
and getting started OK so let's begin by showing you how to create a list creating a list in Python's

00:26.440 --> 00:32.440
really simple you just type in whatever you want the variable to be equals and then you use square brackets

00:32.530 --> 00:35.300
and separate every item in the list by a comma.

00:35.680 --> 00:39.690
So for instance here is a list of the numbers 1 2 and 3.

00:39.700 --> 00:45.160
Now we just created a list of integers but we can also create a list of many different ogic types.

00:45.160 --> 00:53.800
So for example I could say my list and have it hold some string stuff maybe some more numbers integers

00:54.220 --> 00:59.760
some floating point numbers and then later I will see how it can hold a booleans and more.

00:59.800 --> 01:05.680
So again we can have mixed data types inside of a list and we can even have a list nested inside of

01:05.680 --> 01:06.250
a list.

01:06.250 --> 01:08.830
So this is totally good code and it will work.

01:08.830 --> 01:14.330
So let's actually run this to verify that I'm going to call Python and then I call this script list

01:14.390 --> 01:16.160
that PI enter.

01:16.180 --> 01:21.400
We don't get anything out because we didn't print the list so we can do this print my list and let's

01:21.400 --> 01:22.880
comment this one out.

01:23.050 --> 01:30.830
Again this just command forward slash entry and we see that the list has no problems being printed out.

01:30.830 --> 01:34.870
And just like a string we can call the Eliane function on it.

01:34.910 --> 01:37.600
So length of my list.

01:37.670 --> 01:44.720
And let's not use the more normal list 1 2 3 and actually print out that length and we see we have three

01:44.720 --> 01:48.170
items in the list one two and three.

01:48.200 --> 01:48.710
OK.

01:48.710 --> 01:54.630
Indexing is slicing works basically the same as that in a list or excuse me in a string.

01:54.630 --> 02:03.160
So I'm going to read the fine list to be a b and then whip's comma.

02:03.160 --> 02:10.910
See if I want the very first item in the list I just have to use my list 0.

02:10.930 --> 02:14.320
So let's print that out and confirm this should return a.

02:14.760 --> 02:23.290
So if I run this to enter I get back I wanted see I could just say negative 1 and that would give me

02:23.290 --> 02:29.320
back the last item in the list and to add a couple more terms in here so we can see how slicing works

02:29.350 --> 02:31.460
not just indexing by hand.

02:31.570 --> 02:37.870
ABC if I want to grab everything starting at index 1 all the way to the end again is just one colon

02:38.440 --> 02:41.000
and that will give me b all the way to the end.

02:41.290 --> 02:45.290
Or if I want everything from the beginning up to but not including index 3.

02:45.430 --> 02:47.010
So this should be ABC.

02:47.110 --> 02:49.220
I get a list ABC.

02:49.390 --> 02:49.820
All right.

02:50.770 --> 02:55.950
Now let's talk about actually adding items to a list of like a string.

02:56.000 --> 03:02.530
Lists are immutable meaning I can say my list grabbed the item at index 0 and set it equal to something

03:02.530 --> 03:03.780
totally different.

03:03.820 --> 03:14.270
So let's say new item here and let me print out my list and let's print it out before.

03:14.270 --> 03:23.490
So we'll say before reassignments and then prints my list.

03:25.150 --> 03:27.360
Not as a string as the variable itself.

03:28.210 --> 03:38.780
And then we will prints after reassignments save this run the code and here you can see before re-assignment

03:38.840 --> 03:46.610
I have ABC and then with line code number five with this re-assignment I have new item B C D E and that

03:46.610 --> 03:53.860
just puts the point forward that we can actually do reassignments with index calls on a list defining

03:53.880 --> 03:56.290
it as a mutable item.

03:56.300 --> 03:56.860
OK.

03:57.200 --> 04:03.140
Now let's talk about some basic list methods that you may find useful if you want to add new item and

04:03.230 --> 04:06.260
have it be appended to the very end of a list.

04:06.290 --> 04:12.020
All you have to do is use the append call so I can say my list and you can see the very first one here

04:12.020 --> 04:12.810
is a pen.

04:13.130 --> 04:19.180
So we can select that and then you can append any item to the list so I can say something like.

04:19.310 --> 04:19.970
New item

04:22.900 --> 04:25.350
and this will not affect any current item in the list.

04:25.360 --> 04:28.080
It will just append it to the very end of the list.

04:28.090 --> 04:31.840
So now let's print my list after we appended.

04:31.980 --> 04:41.140
So I'm going to save run this again and here I can see my list was now a b c d e and then new item was

04:41.140 --> 04:43.230
appended to the very end of it.

04:43.330 --> 04:48.470
If I end up appending a list to this.

04:48.800 --> 04:59.550
So let's say I have a list that says X Y and Z just to make this clear.

04:59.570 --> 05:00.850
Note my brackets here.

05:00.890 --> 05:04.100
Actually appending a new list to the end of this.

05:04.220 --> 05:10.090
What's going to happen is that now this very last item completely is a list.

05:10.160 --> 05:16.790
If you actually want this list to be a part of the original will you have to do is NOT use a pen but

05:16.790 --> 05:20.010
use the extend method.

05:20.210 --> 05:23.520
And then we can let's just actually put this to a new variable.

05:24.290 --> 05:28.450
So we'll say list two is equal to that list.

05:29.330 --> 05:36.550
And I'm going to instead of appending something I will extend that save this note the difference here.

05:36.580 --> 05:37.740
This was with a pen.

05:37.930 --> 05:42.810
That means the very last item is the list so the list nested inside of another list.

05:42.820 --> 05:49.720
If I use extend instead and then print out the list then I actually extend the list to include these

05:49.810 --> 05:51.140
all these items right here.

05:51.340 --> 05:56.860
So note the bracket difference between append and extend and you only use X10 when you want to extend

05:57.160 --> 05:59.800
another list with the original list.

06:01.310 --> 06:05.480
So we've talked about adding things to a list but what if you actually want to remove something from

06:05.480 --> 06:06.350
a list.

06:06.350 --> 06:11.110
Well the most common method for removing something from a list is the pop method.

06:11.290 --> 06:15.520
So I can say my list does pop.

06:15.520 --> 06:21.670
And basically what this does is it grabs the very last item from a list and returns it.

06:21.760 --> 06:31.220
So we'll call this item and then say print my list and print item.

06:31.240 --> 06:39.490
So it's going to happen here when I run this is my originalists was AB ABC then I popped off the very

06:39.490 --> 06:46.240
last item in the list save that to the variable item and then when I print out my list e is now gone

06:46.660 --> 06:49.470
an item is now that letter e.

06:49.990 --> 06:56.470
If you do not want to grab from the very end of a list you can actually specify an index position in

06:56.470 --> 07:00.250
pop so this can be any integer index position as long as it's in the list.

07:00.250 --> 07:04.500
So if I put 0 here now it's going to pop off index 0 which is a.

07:04.750 --> 07:06.260
So let me run this again.

07:06.320 --> 07:12.540
And now I see B C D E and I have a as my item and that's the pop method.

07:12.850 --> 07:20.470
And keep in mind pop method returns an item to more useful methods that you may find yourself using

07:20.540 --> 07:23.450
our reverse and sort.

07:23.500 --> 07:29.530
So if I say my list reverse close parentheses and then actually print out my list

07:32.890 --> 07:38.770
that I will get a reversed version to the list ECB A and something that's interesting to note here is

07:38.770 --> 07:44.640
that this occurs in place and what I mean by in place is I didn't have to save this to another item

07:44.650 --> 07:46.170
to see the change effect.

07:46.240 --> 07:51.190
All I had to say was my list that reverse and my list was changed in place permanently.

07:51.220 --> 07:55.540
So then when I reprinted my list it ended up being in reverse down here.

07:55.540 --> 07:56.690
So that's reverse.

07:56.860 --> 08:04.200
And then let's create a list here with a bunch of numbers in it some random numbers and is that a reverse.

08:04.190 --> 08:12.020
What I'm going to do is ask for sort in if I save that and run this it will actually end up sorting

08:12.020 --> 08:12.910
that list.

08:12.920 --> 08:17.750
So Python has its own rules for sorting things especially if you have multiple data types and they're

08:17.750 --> 08:19.290
like strings and numbers.

08:19.340 --> 08:23.030
It has a specific hierarchy and you can check out the Python documentation.

08:23.060 --> 08:27.920
If you find yourself needing to know that hierarchy but for the rest of this course we won't be dealing

08:27.920 --> 08:33.800
with sorting mixed data type lists and it's actually bad practice to do that because it's unusual to

08:34.010 --> 08:39.470
have to do that operation should try to have only one sort of data type for a single list.

08:39.490 --> 08:49.060
OK finally I want to mention two more topics which is a nested list index and then a list comprehension

08:49.120 --> 08:52.180
and will cover a list comprehensions in much more detail later on.

08:52.180 --> 08:56.700
But I want you to be aware of them now since they may be confusing to beginners.

08:57.310 --> 09:04.870
But if I have a nested list so will say my list is 1 2 and then the third item in the list is going

09:04.870 --> 09:10.930
to be x y z.

09:12.150 --> 09:18.130
If I call Prince my list and I'm looking for the third item.

09:18.300 --> 09:23.860
So an index to what's going to happen when I print this is I get this entire list back.

09:23.940 --> 09:27.040
So if I run this right now I get X Y and Z.

09:27.120 --> 09:29.720
Imagine that I'm only looking for the letter Y.

09:29.830 --> 09:34.740
All I have to do here is add another set of brackets to actually index this list that was returned to

09:34.740 --> 09:35.130
me.

09:35.280 --> 09:37.050
And why is index 1.

09:37.050 --> 09:40.640
So I just put the number one here save it run this again.

09:40.820 --> 09:45.510
And now I get the letter Y return to me and that's how you can index a nested list and you can do this

09:45.510 --> 09:47.660
with a nest within an S within a nest.

09:47.670 --> 09:48.500
That's not too common.

09:48.500 --> 09:50.530
Usually elect to do two levels at most.

09:50.640 --> 09:55.350
But keep in mind this could keep going over and over again depending how many lists you had nested inside

09:55.410 --> 09:56.820
of another list.

09:56.820 --> 09:59.820
So that's nested list indexing.

09:59.820 --> 10:05.910
And finally I want to show you a list comprehensions so to do this I'm going to create a list called

10:05.910 --> 10:08.560
Matrix which is going to be a nested list.

10:08.790 --> 10:18.190
So this will be one to three as the first item or 5 6 as the second item and then 7 8 9.

10:18.290 --> 10:22.470
So right now I have three lists inside of a single list.

10:22.550 --> 10:28.910
There's only three items in Matrix but each item is three more items in the list which means I can do

10:28.910 --> 10:30.290
something like Matrix

10:33.110 --> 10:37.080
0 0 and that counts as one.

10:37.100 --> 10:41.570
So the very first item here and the very first item of the item.

10:41.570 --> 10:42.940
Now for a list comprehension.

10:42.980 --> 10:48.200
It's basically going to be like a for loop but flattened out into a list.

10:48.320 --> 11:00.050
So if I want the very first column what I could do is say Roseboro for row in Matrix and we'll be covering

11:00.050 --> 11:03.140
list comprehensions and for loops and a lot more detail later on.

11:03.170 --> 11:07.850
But I just want to show what's possible with Python and how you can make really clean looking Python

11:07.850 --> 11:08.950
code.

11:08.990 --> 11:15.840
So then I'm going to Prince first call save this run this python list.

11:15.970 --> 11:18.350
And now I see I have one for 7.

11:18.360 --> 11:20.410
So what is actually going on here.

11:20.460 --> 11:25.820
Well I'm saying for row in matrix in row counts as each item elicits saying.

11:25.980 --> 11:34.380
For this one this one and this one grab the very first element so rad with Bracq index location element

11:34.380 --> 11:34.940
0.

11:35.100 --> 11:38.260
So then it returns 1 4 and 7.

11:38.310 --> 11:42.830
So this is a for loop basically flattened out into a list and it's inside brackets.

11:42.830 --> 11:44.720
So ends up returning illest itself.

11:44.880 --> 11:48.660
And this is known as list comprehension.

11:48.820 --> 11:52.720
Now we're going to be covering this a lot more but this is definitely something you're going to see

11:52.720 --> 11:53.890
all the time with Python.

11:53.890 --> 11:54.960
It's a great tool.

11:55.030 --> 11:59.290
And as you begin to get more advance of Python you yourself will be using it a lot.

11:59.290 --> 11:59.650
All right.

11:59.650 --> 12:02.170
That's all we need to know about Python lists for now.

12:02.170 --> 12:04.300
Thanks everyone and I'll see you in the next lecture.
