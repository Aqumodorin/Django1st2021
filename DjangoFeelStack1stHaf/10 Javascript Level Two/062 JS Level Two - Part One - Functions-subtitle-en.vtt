WEBVTT

00:00.210 --> 00:03.460
Hello everyone and welcome to part one functions.

00:03.600 --> 00:07.610
Functions are going to be our main building block when we're ever dealing with javascript code.

00:07.680 --> 00:12.720
And honestly any code they're going to allow us to easily reuse code more than once and not constantly

00:12.720 --> 00:13.940
repeat our cells.

00:14.010 --> 00:18.090
If you've already programmed in another programming language you may just want to check out the notes

00:18.090 --> 00:21.270
to quickly grab the syntax for functions in Javascript.

00:21.270 --> 00:25.800
But if this is your first time programming Lets take a little bit of time to describe what a function

00:25.800 --> 00:29.940
is and what it's going to look like in javascript and then we'll hop over to the editor and code out

00:30.030 --> 00:34.640
a bunch of examples so the general syntax for a javascript function looks like this.

00:34.650 --> 00:39.810
You have the keyword function and that's going to indicate that you have a function.

00:39.830 --> 00:43.970
Then you have the actual name of your function and you're going to decide whether you want the name

00:43.970 --> 00:45.380
to be.

00:45.500 --> 00:49.970
And then you also have the option of passing parameters and you could also not have any promotors So

00:49.970 --> 00:56.210
here I just showed two parameters parameter one parameter to and someone using the function could pass

00:56.210 --> 01:00.500
in parameters required for the function to do something with Zuid passing those parameters and then

01:00.530 --> 01:05.980
inside that code to be executed inside those curly brackets you would do something with those parameters.

01:06.140 --> 01:10.700
So let's go straight to the other and our consul to really show how to create and use functions in javascript

01:10.940 --> 01:13.330
and get a better understanding of what's actually going on here.

01:13.370 --> 01:19.500
Going to jump to my editor now or so I have my editor open I have an html file that linked to my script

01:19.500 --> 01:21.910
that Jesus and here I have a blank.

01:21.910 --> 01:26.950
My script that Jesus and that is email file is open and linked teare in the browser.

01:26.950 --> 01:31.000
And if you want you can also put everything that we're type being straight into the console but it's

01:31.000 --> 01:34.010
going to look a little better if you put it into Atam.

01:34.050 --> 01:38.510
Let's start off with the most simple function we can think of which is just a hello function.

01:38.750 --> 01:46.440
So I'm going to put it in the special keyword function called my function hello so I give it a name.

01:46.440 --> 01:49.650
Close parentheses so it won't have any parameters.

01:49.830 --> 01:56.770
Then the curly brackets and inside this function and put some code in I'm going to input log.

01:57.250 --> 02:01.020
And will just say hello world.

02:01.020 --> 02:03.340
And this is the most basic function we can have.

02:03.360 --> 02:04.930
So what's actually going on here.

02:05.130 --> 02:10.500
A keyword function than the name of my function imprint sees a pass and any parameters.

02:10.530 --> 02:12.560
In this case we won't pass anything yet.

02:12.750 --> 02:15.660
And then whenever this function is called I will log.

02:15.690 --> 02:17.540
Hello world.

02:17.570 --> 02:23.170
So let's save this if we refresh our page.

02:23.170 --> 02:28.240
Well notice that we can actually call hello enter and we get.

02:28.260 --> 02:29.490
Hello world.

02:29.490 --> 02:35.130
So in our browser after running this java script connected to say Tim L. I can now call this function

02:35.130 --> 02:41.250
here and what I want you to know is sometimes what happens is students get confused on how to call a

02:41.250 --> 02:41.860
function.

02:41.910 --> 02:48.390
They'll just type in hello over here with no parentheses enter and they actually get back the function

02:48.390 --> 02:49.350
itself.

02:49.350 --> 02:54.310
So the difference here is that one of these is calling the function and the other one is just returning

02:54.310 --> 02:54.850
it.

02:55.200 --> 02:59.030
So going to zoom in a little more here just so you can see what I'm talking about.

02:59.840 --> 03:05.060
In this case I called the function to execute with the parentheses there in the second case.

03:05.060 --> 03:08.860
I'm actually just calling the function but I'm not executing the function.

03:09.010 --> 03:12.050
And in that case javascript's says like oh you wanted the function.

03:12.050 --> 03:13.100
Well here it is.

03:13.100 --> 03:15.700
This is what the function actually is with the prince.

03:15.730 --> 03:19.380
Though you're telling javascript OK actually execute that function.

03:20.980 --> 03:25.600
All right let's expand this example by calling the function.

03:25.630 --> 03:32.420
Hello you and we will pasan passen a name.

03:32.460 --> 03:34.500
So that's my parameter name.

03:34.720 --> 03:38.020
In this case I will say console log.

03:38.040 --> 03:38.640
Hello

03:41.470 --> 03:43.820
plus name.

03:44.260 --> 03:45.480
So I will save that.

03:45.500 --> 03:46.100
It's FREE.

03:46.150 --> 03:50.550
Let's clear a console and then a refresher page

03:53.260 --> 03:54.550
and now we're going to do is call.

03:54.550 --> 03:59.470
Hello you boops clear.

04:00.370 --> 04:05.230
Hello you and know what happens if I just typed help you if no parentheses.

04:05.370 --> 04:10.060
It returns back the actual function but I want to call the function.

04:10.390 --> 04:17.260
So I will say hello you if I just have princes with no name parameter I'll get hello.

04:17.280 --> 04:18.200
Undefined.

04:18.240 --> 04:24.140
So that's important to note here because I expected something to be the name a parameter to be passed.

04:24.270 --> 04:26.960
In this case since I didn't pass anything it just said hello.

04:27.000 --> 04:28.810
Undefined parameter.

04:28.860 --> 04:30.410
Well I really should do something like this.

04:30.420 --> 04:31.300
Hello.

04:31.610 --> 04:37.130
You then pass in that name parameter which in my case I expect a string there.

04:37.380 --> 04:39.040
So I will say hello you Jose.

04:39.090 --> 04:41.060
And it says Hello Jose.

04:41.070 --> 04:42.450
In the actual con..

04:42.540 --> 04:48.810
So that's the very basics of a function that accepts some sort of parameter input and then uses it within

04:48.810 --> 04:54.150
the function code itself and later on also talk about scope of the function which is pretty important

04:54.150 --> 04:54.620
as well.

04:54.640 --> 04:59.610
But right now the basics here that I want you to get is that you can put in a parameter and then use

04:59.610 --> 05:02.000
it within your actual function code.

05:02.010 --> 05:07.440
The main idea of a function overall is that I don't have to keep typing cancel that log every time that

05:07.440 --> 05:08.330
I want to do something.

05:08.340 --> 05:09.500
All I have to do is call.

05:09.510 --> 05:13.680
Hello you and this is going to be really useful for more complicated functions.

05:13.680 --> 05:18.660
Let's expand this to a simple function but a function that takes in two parameters and only to delete

05:18.690 --> 05:19.520
this.

05:19.670 --> 05:25.050
And if you can start typing fun enter and you get something like this function name.

05:25.050 --> 05:30.480
Note that it's camel case meaning that we don't use underscores and instead we separate words by lowercase

05:30.480 --> 05:32.690
and then uppercase letters.

05:32.750 --> 05:35.110
In this case no pun intended.

05:35.120 --> 05:45.920
I'm going to say add numb as my actual function name and then I will take number one and number two

05:46.580 --> 05:49.500
to be the function parameters.

05:50.270 --> 05:57.370
And then I will log number 1 plus 2.

05:57.430 --> 06:04.850
So let me save this and I will clear the council Well I actually should refresh the page to make sure

06:04.880 --> 06:07.040
Adam is loaded up.

06:07.050 --> 06:14.340
So here I refresh the page let's call ad nauseam and let's passen two and three.

06:14.510 --> 06:16.220
We hit enter and we get five.

06:16.310 --> 06:16.520
All right.

06:16.520 --> 06:18.250
So it's actually happening here.

06:18.290 --> 06:23.590
While Adam is taking in two parameters and I called the printer's number one and them two.

06:23.690 --> 06:29.600
And then inside the actual function code that block it's going to add them together and then lock that.

06:29.710 --> 06:31.750
Let's see what happens if I say add

06:34.990 --> 06:37.690
Hello comma

06:40.890 --> 06:44.540
we hit Enter we notice that we get hello world back.

06:44.710 --> 06:49.140
Something to remember here is that we can concatenate strings with this addition sign.

06:49.210 --> 06:53.920
So later on we'll be talking about making sure that you have the correct data type you expect whenever

06:53.920 --> 06:58.750
you're creating a function because right now this functions a little too loose in what it expects as

06:58.750 --> 06:59.690
a parameter.

06:59.710 --> 07:05.410
You'll end up working with either strings or numbers which isn't very good for us because that means

07:05.710 --> 07:12.610
if we call this function later on in our code and we actually do something like this add and we pass

07:12.610 --> 07:19.540
an maybe a two a string to as a number you'll end up getting something like 22.

07:19.690 --> 07:24.100
But that's not really what you were probably expecting you may have been expecting for.

07:24.130 --> 07:29.100
So it's kind of a dangerous situation to be in because of javascript's type coersion.

07:29.200 --> 07:34.430
So usually you want to check types or make sure the operations will only work on certain data types.

07:34.450 --> 07:38.560
So that's just a little warning but we'll talk a lot more about that later on in the course.

07:38.580 --> 07:42.700
For right now what I really want you to understand is that I have two parameters and I'm using them

07:42.760 --> 07:44.400
inside of my function call.

07:44.810 --> 07:45.530
OK.

07:45.700 --> 07:48.220
Now let's talk about default values.

07:48.490 --> 07:53.740
So so far we've had to define every single argument or parameter in the function when using it.

07:53.940 --> 07:56.620
But we can also have default values by using an equal sign.

07:56.620 --> 07:58.930
And let me show you an example of that.

07:59.040 --> 08:01.680
And again I will create a function here.

08:02.540 --> 08:05.180
The function name will be hello someone

08:09.050 --> 08:20.600
it takes in a name and it will console log Hello plus that name but instead of having a name be undefined

08:20.870 --> 08:25.690
if no one passes in a name I'm going to have a default name.

08:25.710 --> 08:28.750
Now let's make that the fault name Frankie.

08:28.860 --> 08:30.260
So let's see what happens now.

08:30.330 --> 08:40.740
When I refresh this page and I call hello someone if I call hello someone with Jose as the parameter

08:41.090 --> 08:42.320
then I hit enter.

08:42.360 --> 08:48.920
I get Hello Jose but if I call hello someone with nothing inside of it then I hit enter.

08:48.940 --> 08:50.050
Hello Frankie.

08:50.080 --> 08:56.440
So we can use an equal sign in this manner to actually assign default parameters in case a parameter

08:56.440 --> 08:59.520
is not supplied by the user OK.

08:59.600 --> 09:01.310
So that's the fault parameters.

09:01.310 --> 09:03.450
Now let's talk about returning values.

09:03.650 --> 09:07.130
So far we've actually just been printing or logging results.

09:07.280 --> 09:12.140
But what if we actually want to return results so we could assign them to a variable and then we can

09:12.200 --> 09:14.420
use the return keyword for this task.

09:14.570 --> 09:21.890
In this falling manner let me show you what I mean by all this will create another other function and

09:21.890 --> 09:30.240
let's call it formal and formal takes in a name will give a default name of Sam.

09:30.470 --> 09:37.370
And it also takes in a title argument and will also give a default title of Sir.

09:37.410 --> 09:42.150
So we have two default parameters are two default arguments there and the terms parameters and arguments

09:42.150 --> 09:44.520
are used entertain interchangeably a lot.

09:44.670 --> 09:46.320
So keep that in mind.

09:46.350 --> 09:56.900
Now I'm going to say console log title plus a space plus name.

09:57.040 --> 10:02.690
So let me save this going to refresh the page and call formal

10:05.490 --> 10:08.840
hit enter and it says Sursum great.

10:08.860 --> 10:15.350
So what if I do this I say welcome.

10:15.560 --> 10:19.560
Plus formal will then it says welcome.

10:19.850 --> 10:22.660
Undefined which is probably not what you expected.

10:22.670 --> 10:24.290
You expected it to say.

10:24.290 --> 10:26.240
Welcome sir Sam.

10:26.390 --> 10:30.400
We can see here that it only outputted sir Sam when the formal was called.

10:30.530 --> 10:34.380
But when I wanted to actually print this whole thing that said welcome in the find.

10:34.580 --> 10:40.680
So if I would actually put that all within a console log call.

10:40.820 --> 10:47.760
So I say welcome plus formal hit enter.

10:47.840 --> 10:49.980
I get again a welcome on the find.

10:49.980 --> 10:53.090
So you might be wondering what's actually going on here and what's going on.

10:53.090 --> 10:55.060
Is this function right here.

10:55.070 --> 10:57.100
Is it actually returning anything.

10:57.170 --> 10:59.790
It was just printing something one time.

10:59.870 --> 11:04.820
If we want to actually return something so we can use it in a variable we need to use the return keyword

11:05.920 --> 11:08.350
and let me show you how we can do that.

11:08.380 --> 11:09.710
We will just say return.

11:09.710 --> 11:14.220
We could see there's already a return keyword and then say whatever you want to return.

11:14.260 --> 11:20.800
In our case will return the exact same thing title plus space plus name.

11:20.890 --> 11:23.570
And now I can save this.

11:23.770 --> 11:30.240
Refresh my page and if I call formal I still get the output.

11:30.240 --> 11:31.640
Sir Sam.

11:31.740 --> 11:41.410
Now I can actually assign that value so I can say variable output is equal to formal Banafsheh call

11:41.410 --> 11:42.260
output.

11:42.400 --> 11:48.430
I get Sir Sam means I can also do what I wanted to do before which was welcome plus formal.

11:48.430 --> 11:49.060
Now I get it.

11:49.070 --> 11:56.220
Welcome Sursum instead of just welcoming the find OK so that might seem a little confusing at first

11:56.310 --> 12:00.370
especially with these examples of showing the console log versus the return.

12:00.570 --> 12:07.770
But all you really need to understand for now is that if you want to save the result of a function you

12:07.770 --> 12:12.740
want to use the return keyword so that it actually spits out something to return.

12:12.750 --> 12:17.610
So whenever I call formal whatever it does it's going to return what is on this line.

12:17.610 --> 12:25.410
So usually you'll have a bunch of code over here doing something code some more code etc. and at the

12:25.410 --> 12:32.510
very end you will return some sort of variable that you find using all of this code up here.

12:33.590 --> 12:41.090
Let's break down a more complicated example by doing something like multiplication so I will call a

12:41.090 --> 12:53.950
new function function name and I will call this function times 5 and I will say no input so takes in

12:53.950 --> 12:57.560
this parameter and the input inside of my function.

12:57.610 --> 13:10.350
I create a variable called result and set equal to numb input times 5 and then I return that result.

13:10.350 --> 13:11.420
So far so good.

13:12.500 --> 13:20.860
And then if I refresh this page I can call times 5 pasan a number 4 and I see I get 20 back.

13:21.280 --> 13:24.990
OK so that also means that I'm using the return keyboard.

13:25.000 --> 13:35.820
I can see variable let's say variable answer is equal to times 5 and will pass and another number 10

13:35.820 --> 13:36.260
here.

13:37.140 --> 13:40.520
And now if I call answer I get 50.

13:40.650 --> 13:45.830
I wouldn't be able to do this sort of variable assignment if I was just doing a console log of the result.

13:46.110 --> 13:51.130
Instead of this return key word I can now assign the result to some sort of variable.

13:51.150 --> 13:55.100
In my case the variables called the answer great.

13:55.140 --> 14:01.560
So you've talked so far about using the return key word using parameters and also using default parameters.

14:01.560 --> 14:06.600
Let's take a moment to talk about a really important concept that's called scope and scope is the term

14:06.600 --> 14:12.510
we use to describe how objects and variables get defined offend javascript's when discussing scope with

14:12.510 --> 14:18.810
functions as a general rule we can say that if a variable is defined only inside a function then its

14:18.810 --> 14:21.460
scope is limited to that function.

14:21.510 --> 14:28.440
So let's consider the example we just showed here times five input we created a variable called Rozell

14:28.620 --> 14:30.430
equals to input times 5.

14:30.600 --> 14:39.190
Now we return a result if I call answer I get 50.

14:39.200 --> 14:47.270
But if I try calling result here I get result is not defined at anonymous and the main idea here is

14:47.270 --> 14:54.530
that the scope of results is limited to this function that actual variable doesn't exist outside of

14:54.530 --> 14:55.390
this function.

14:55.490 --> 14:57.730
Unless I define it outside of the function.

14:58.010 --> 15:04.190
So again as a general rule we can say that if a variable is defined only inside of a function then the

15:04.190 --> 15:07.420
scope of that variable is limited to the function.

15:07.460 --> 15:14.720
So it's only going to be recognized when it's called inciters function and the same goes for these parameters.

15:14.750 --> 15:21.680
So if I come up here next to the console and try to say something like num input and hit enter I will

15:21.680 --> 15:25.900
also get a not defined error.

15:26.100 --> 15:38.650
So that means that this has a bit of a Pip's local scope to the function.

15:38.650 --> 15:46.030
Now let's try to make something more of the global scope.

15:46.200 --> 15:49.870
So the global scope is going to be different than that local scope.

15:50.020 --> 15:55.840
And basically what happens is if we have a variable that we define outside of the function that's going

15:55.840 --> 16:01.200
to be a global variable and the function will have access to them due to their scope.

16:01.210 --> 16:03.270
Let's show an example or create a variable.

16:03.280 --> 16:12.870
It's outside of any function and we'll call it the and this is going to just be a string that kind of

16:12.870 --> 16:17.830
really obviously is going to be a global variable so say global V.

16:17.940 --> 16:22.890
So that stands for Global variables so we can see variable be just a big string out there.

16:22.890 --> 16:26.450
Also make a variable called Stuff.

16:26.550 --> 16:34.620
Now we'll say have it be a string global stuff you know and create a new function.

16:34.980 --> 16:36.500
It's going to be called just fun.

16:38.050 --> 16:40.210
It's going to take and stuff

16:43.030 --> 16:49.810
and it's going to log the it's going to reassign stuff inside.

16:49.820 --> 16:58.490
So I will reassign it literally to a string claiming it's re-assignment so reassigned stuff inside func

17:00.180 --> 17:08.050
and then I will log stuff and let's delete this top function here since we won't be using it.

17:08.540 --> 17:08.990
OK.

17:08.990 --> 17:12.920
Before we actually run this let's break down what's happening here.

17:12.920 --> 17:20.500
I have two variables defined outside of any function that I'm calling function fun have stuff as a parameter.

17:20.510 --> 17:24.260
But no I never actually I'm going to call stuff.

17:24.260 --> 17:32.560
I'm just going to do this fun and then I'm going to say console log the I never find the inside the

17:32.560 --> 17:34.510
function it's only to find that peer.

17:34.570 --> 17:40.900
I will reassign stuff only inside the function and then I will say console log stuff.

17:41.010 --> 17:45.390
Let's save this and run it in our browser.

17:45.390 --> 17:53.440
So refresh and I get this global V re-assign stuff inside function.

17:53.440 --> 18:00.700
Now let's add one more line of code after this function call to execute the function.

18:00.700 --> 18:03.530
And then when say this cancel the log.

18:04.050 --> 18:07.030
And I was going to log stuff.

18:07.140 --> 18:10.620
Let's see what happens when we actually run this code.

18:10.640 --> 18:15.860
So let me save that and refresh and run.

18:15.890 --> 18:20.300
So it says global V re-assign stuff inside func and then global stuff.

18:20.990 --> 18:25.710
OK let's break down all the lines of code here and actually explain what's going on.

18:25.730 --> 18:27.950
So we get a really clear idea of scope.

18:27.950 --> 18:32.490
So this whole idea that we're talking about right now is known as scope.

18:32.630 --> 18:39.800
So the folly happens console log the is going to check for the global variable v the outer scope if

18:39.800 --> 18:45.390
it can't find anything there that is going to check for the local scope inside of the function.

18:45.470 --> 18:50.690
And if it can't find anything there then it's going to throw an error that it was never defined.

18:50.780 --> 18:53.860
Console log stuff over there at the bottom.

18:53.890 --> 18:56.820
We'll also check for the global variable stuff.

18:57.770 --> 19:04.760
And then the call fun stuff is accepting or even stuff that it's printing out V and it's re-assigning

19:04.760 --> 19:07.340
stuff only inside the scope of the function.

19:07.670 --> 19:09.080
And then it's going to print us stuff.

19:09.080 --> 19:10.690
So notice two things here.

19:10.850 --> 19:16.820
The re-assignment of stuff only affects the scope of the stuff variable inside the function.

19:17.090 --> 19:21.940
And the fun function first checks to see if these the fine at the functions go.

19:22.060 --> 19:28.100
And if not which is our case it will then search the global scope for the variable names V leading it

19:28.100 --> 19:31.910
to print out these global V as a string.

19:31.910 --> 19:32.380
OK.

19:32.600 --> 19:36.660
So really take your time with these few lines of code and understand what's happening here.

19:36.860 --> 19:43.570
Really Make sure you understand why global is printed out why we get this re-assign stuff inside function.

19:43.820 --> 19:47.050
And then even with the re-assignment inside of this function.

19:47.240 --> 19:49.920
So that's only happening at a low level.

19:50.030 --> 19:54.420
Even after I call the function of line 11 when I print out stuff online.

19:54.440 --> 19:57.940
Well I still get back the original global stuff.

19:57.950 --> 19:58.520
Thanks everyone.
