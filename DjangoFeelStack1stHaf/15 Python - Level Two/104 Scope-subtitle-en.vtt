WEBVTT

00:04.930 --> 00:08.510
Hello everyone and welcome to part one scope.

00:08.670 --> 00:13.350
We've already discussed scope a bit in the past specifically in the javascript section of the course

00:13.590 --> 00:16.710
but Python scope rules can sometimes confuse beginners.

00:16.710 --> 00:22.470
So let's quickly go over the key rules of Python's scope Python's scope follows the.

00:22.610 --> 00:27.370
Be rule local inclosing function local's global and builtin.

00:27.470 --> 00:32.710
And what this actually means is if you define a variable name somewhere in your code and then later

00:32.770 --> 00:35.590
on in your code you want to call that variable.

00:35.590 --> 00:40.810
Python needs to look in what's known as the namespace which is basically where it knows what variable

00:40.810 --> 00:47.170
names go where but sometimes it needs to follow rules to know what scope you're actually calling and

00:47.170 --> 00:48.420
the order it goes in.

00:48.460 --> 00:53.860
Is it first looks for local variables then it looks for inclosing function locals then it looks for

00:53.860 --> 00:59.400
global variables and then finally if it still can't find that namespace it goes to the builtin.

00:59.580 --> 01:04.950
So it's actually defined these four topics a little more so the local level or names assign that.

01:04.960 --> 01:10.830
Anyway within an actual function that includes a function or lambda expression and they're not declared

01:10.830 --> 01:15.260
global in that function meaning they don't use some sort of global keyword call.

01:15.360 --> 01:21.090
Then we have the enclosed function locals and that's names in the local scope of any and all inclosing

01:21.090 --> 01:21.780
functions.

01:21.800 --> 01:28.720
The E-F Orlando expressions from inner to outer now has to do with functions within other functions.

01:29.030 --> 01:34.460
Then we have the global level and those are names of sign that the top level of a module file or declared

01:34.460 --> 01:37.010
global and ADF within the file.

01:37.010 --> 01:41.530
And that again is either at the top level or using the global keyword.

01:41.540 --> 01:46.340
Then finally if we still can't find that variable name we look into the built in level and those are

01:46.340 --> 01:46.640
names.

01:46.640 --> 01:52.520
Pre-assigned and the built in names module things such as Open the range function a syntax error or

01:52.520 --> 01:57.600
even things such as the Eliane which has the builtin length function OK.

01:57.810 --> 02:02.320
Let's actually walk through some simple examples to make Python's scope a lot more clear to you.

02:02.580 --> 02:04.370
Let's hop over to the editor now.

02:04.710 --> 02:06.670
OK to begin her discussion of scope.

02:06.690 --> 02:09.210
Let's start off with a simple experiment.

02:09.210 --> 02:16.230
Imagine at the top of the file I define X to be equal to 25 and then I'm going to re create some function

02:16.230 --> 02:17.830
we'll call it my func.

02:17.970 --> 02:25.300
It doesn't take any arguments or parameters but what happens is it sets X equal to 50 and then what

02:25.300 --> 02:28.580
it will do it's going to return x.

02:28.630 --> 02:29.830
So that's what it does.

02:30.130 --> 02:34.750
And then what I'm going to do outside of this is say print x.

02:35.230 --> 02:41.070
So take some time and think what the actual output is going to be when I run this file.

02:41.270 --> 02:44.780
So I will say Python lodestar PI enter and I get out.

02:44.780 --> 02:48.910
X is equal to 25 or just 25.

02:48.920 --> 02:51.960
Hopefully that makes sense to you because we haven't even run this function yet.

02:51.980 --> 02:54.030
All we've done is to find it.

02:54.050 --> 03:00.830
The only thing that X here on line 7 is aware of is the Global X which is appear on line 1.

03:00.830 --> 03:09.780
Now let's imagine this we say print and I call my phunk inside of that print statement.

03:09.780 --> 03:15.920
Now remember this my function returns X after reassigning it to X equals 50.

03:15.920 --> 03:17.960
Now if I save this and run it.

03:17.960 --> 03:19.190
What do you expect to come out.

03:20.140 --> 03:26.980
Well hopefully expected 25 and 50 so that actually makes sense because remember Line 7 is looking at

03:26.980 --> 03:33.870
the Global X and then if I call my func it redefines that global x 25 to be equal to 50.

03:33.940 --> 03:40.020
Only inside the scope of the function and then returns X which in this case it will print out 50.

03:40.030 --> 03:46.720
Now sometimes what confuses students is this third line what happens if I say print x.

03:46.810 --> 03:48.780
Now what happens if I say print x.

03:48.880 --> 03:52.480
After I call my function in this manner.

03:52.480 --> 03:57.110
So let's comment these out and see what happens.

03:57.270 --> 03:58.050
So take some time.

03:58.050 --> 04:01.800
What do you expect to happen here on lines 9 and 10.

04:01.800 --> 04:03.460
I'm going to run this and will see.

04:03.660 --> 04:05.610
I get x is equal to 25.

04:05.610 --> 04:07.390
Hopefully that's what you also expected.

04:07.440 --> 04:09.320
If you expect that x is equal to 50.

04:09.450 --> 04:16.830
Let me quickly explain why that didn't happen and that has to do with scope when we read the fine x

04:16.840 --> 04:23.900
is equal to 50 inside of a function that reassignment is limited to the scope of the function meaning

04:23.900 --> 04:29.360
it doesn't actually do the re-assignment in what's known as the global namespace and that has to of

04:29.390 --> 04:35.350
those scope levels remember it goes local inclosing functions global and then built in.

04:35.420 --> 04:40.850
So here when we call my function X is only being redefined inside of this function namespace.

04:41.150 --> 04:47.150
And then when I say Prince X it's going to call this Global X because it really has nothing to do with

04:47.150 --> 04:49.260
this function call OK.

04:49.310 --> 04:56.300
So let's see some more examples of EJB that scoping level in order to really understand what's going

04:56.300 --> 04:56.880
on here.

04:56.990 --> 05:00.220
So that's our a little experiment to kind of introduce the idea of scope.

05:00.390 --> 05:04.090
But let's go ahead and create a land expression.

05:04.280 --> 05:09.180
This will begin to show the very first level which is the local level.

05:09.190 --> 05:17.800
So if I have a land expression that looks something like this Lamda x x to the power to this particular

05:17.830 --> 05:19.400
x is local.

05:19.450 --> 05:29.160
So this is a local level knowledge shoyu inclosing function locals.

05:29.170 --> 05:30.470
And this is the next level.

05:30.520 --> 05:36.180
So this occurs when we have a function inside of another function and which is known as nested functions.

05:36.190 --> 05:41.980
So again for this lambda example you'd probably have this inside of another function but let's show

05:41.980 --> 05:48.940
you inclosing function local's this next level and going to create a variable called name and say this

05:48.940 --> 05:51.410
is a global name.

05:51.430 --> 05:55.660
And the reason it's global is because it's not inside of any function it's at the top level of the stop

05:55.660 --> 06:01.200
pie file which is sometimes also known as a module although we haven't really say that as a module and

06:01.210 --> 06:03.170
aren't calling it in another the PI file.

06:03.200 --> 06:06.180
It's just a simple dot PI file but it is outside of any function.

06:06.190 --> 06:08.350
So it's at the global level.

06:08.350 --> 06:14.770
Now I create a function called grete and inside is great function.

06:14.790 --> 06:24.900
I'm going to assign name to be Samie and inside of this function I define another function called hello

06:26.810 --> 06:40.720
and then I say print Hello last name then outside of all these functions I'm going to call Great let's

06:40.720 --> 06:44.900
say this and hopefully you will know when I run this.

06:44.920 --> 06:46.420
What's going to happen.

06:46.420 --> 06:50.310
So I'll say Python notes that PI take your time.

06:50.320 --> 06:53.280
And before we actually run this think about what you expect to happen.

06:53.300 --> 06:55.320
Note here that I'm calling greed.

06:55.390 --> 06:59.140
Think about this greet return anything or perform any action.

06:59.140 --> 07:05.770
So we enter and we get nothing out and that makes sense because so far greets all it does is it resigns

07:05.830 --> 07:12.130
name equal to Samie in its function name space here and then it has a function defined inside of it.

07:12.130 --> 07:18.960
However no function is actually called Inside of Crete if we want to actually print Hello plus Sammy.

07:19.150 --> 07:20.010
I have to call.

07:20.030 --> 07:20.730
Hello.

07:20.950 --> 07:24.010
So I've only to find that so far.

07:24.090 --> 07:31.830
And look here how in calling Hello lined up with it's the call if I did this call hello.

07:31.840 --> 07:32.710
Within function.

07:32.710 --> 07:33.330
Hello.

07:33.370 --> 07:34.740
That wouldn't make any sense.

07:34.780 --> 07:35.970
It wouldn't know what Hello is.

07:35.980 --> 07:37.780
And you'd get an error there.

07:37.900 --> 07:39.140
So we're going to do this.

07:39.250 --> 07:43.370
And now let's see what happens when I call Python it's supply I get.

07:43.390 --> 07:44.910
Hello Sammy.

07:44.920 --> 07:49.970
So now Samuel was used because the hello function was enclosed inside of the group function.

07:50.200 --> 07:51.620
So what's actually happening here.

07:51.670 --> 07:55.430
I have this global variable name inside of the function.

07:55.440 --> 08:03.640
I re-assign name to be the Samie I assign Hello being equal to print Hello name and the most outer level

08:03.700 --> 08:08.540
it first looks for name is right here inside this enclosing function.

08:08.590 --> 08:14.860
If I put a hash tag here and comment this out then it's not going to find name outside of it.

08:14.980 --> 08:18.280
So it's going to look at the next level which is going to end up being global.

08:18.550 --> 08:21.180
So now let's run Python floats up high and we should see.

08:21.310 --> 08:21.800
Hello.

08:21.820 --> 08:23.790
This is a global name and there it is.

08:23.800 --> 08:24.090
Hello.

08:24.100 --> 08:25.050
This is a global name.

08:25.330 --> 08:30.140
So you can see here the different levels of where Python is looking for variable names in the name space.

08:30.220 --> 08:35.860
And that's really the whole point of scope knowing what variables are going to be used if you have things

08:35.860 --> 08:37.810
like nested functions.

08:38.060 --> 08:41.610
And it's always important to remember and this is sometimes a point of confusion.

08:41.660 --> 08:44.210
It doesn't matter if inside of a function scope.

08:44.240 --> 08:45.580
I read the file name.

08:45.710 --> 08:52.940
If I go back outside of this function completely and asked to print the name it's going to find it here

08:53.270 --> 08:54.200
globally first.

08:54.230 --> 08:58.130
It's not going to be able to go inside a function and look for it because it really has no business

08:58.370 --> 09:01.160
going inside the function until it's been called.

09:01.160 --> 09:06.620
And even if the function has been called that variable namespace is only here in this local function

09:06.620 --> 09:07.830
scope.

09:07.850 --> 09:10.490
So let me run this hit Python notes and I see.

09:10.490 --> 09:11.460
Hello Samie.

09:11.510 --> 09:14.230
This is a global name because I said name is Sammy.

09:14.330 --> 09:16.760
So greets in its scope when it calls hello.

09:16.770 --> 09:18.110
Name is equal to Samie.

09:18.170 --> 09:21.050
But when I say Prince name it goes to the global one name.

09:21.050 --> 09:22.480
This is a global name.

09:22.550 --> 09:23.360
OK.

09:23.420 --> 09:29.460
Now beyond this there is the built in level and the builtin level is just things that are already built.

09:29.480 --> 09:35.270
So things like elhi end basically anything that pops up in this list here to help you out is built into

09:35.270 --> 09:35.930
Python.

09:36.020 --> 09:38.510
And these are things that you never want to actually read the fine.

09:38.630 --> 09:44.120
You would never want to say Eliane is equal to 23 Otherwise you're never going to be able to call the

09:44.120 --> 09:45.170
length function again.

09:45.200 --> 09:47.660
You would have accidently read the fine in the global space.

09:47.660 --> 09:50.380
So again these are built in function names in Python.

09:50.390 --> 09:51.860
You should never overwrite these.

09:51.920 --> 09:56.720
And you'll notice you've typed based off the syntax highlighting and based on the fact that it's already

09:56.720 --> 09:59.940
trying to help you finish that statement before you've even defined it.

10:00.740 --> 10:04.660
OK so let's talk a little bit little bit more about local variables.

10:04.730 --> 10:09.260
When you declare variables inside of a function definition they are not related in any way to other

10:09.260 --> 10:12.580
variables with the same names used outside of the function.

10:12.600 --> 10:14.790
That's a key point I keep repeating myself on.

10:14.900 --> 10:17.280
So variable names are local to that function.

10:17.360 --> 10:20.010
And this is called the scope of the variable itself.

10:20.270 --> 10:22.120
All variables have the scope of the block.

10:22.160 --> 10:25.940
They are declared in starting from the point definition of the name.

10:25.970 --> 10:30.510
So let's show you another example and it's going to seem like a repetitive example.

10:30.530 --> 10:35.570
So if you kind of already get it maybe you can continue off with this lecture go on to the next one.

10:35.660 --> 10:38.940
But if you're still a little confused Let's show you a couple of more examples.

10:39.000 --> 10:45.260
So I've create a function and I define it at the top globally that x is equal to 50 and then I say DPF

10:45.440 --> 10:49.770
take function X and I'm going to say colon here.

10:49.790 --> 11:00.390
Prince X is and then we can say comma X there is kind of like a fast way to print something and then

11:00.390 --> 11:13.340
I will say X here redefine it to be 1000 and then after that it will print x local x change to come

11:13.400 --> 11:14.740
x.

11:14.990 --> 11:23.770
So we'll save this and then outside of this I will call phunk X save it and then if a hit Python lodestar

11:23.770 --> 11:26.590
PI note here it says X is 50.

11:26.590 --> 11:31.920
So since it hasn't found anything redefining X before Line 4 it goes to the global space.

11:31.960 --> 11:33.030
OK Ezekial 50.

11:33.070 --> 11:35.550
Then locally we redefine X to be 1000.

11:35.590 --> 11:37.860
And it says local Xchange to 1000.

11:38.290 --> 11:39.640
But here's the main catch.

11:39.760 --> 11:48.620
If I say outside of this function even after the function has been called Prince X and I run this you

11:48.620 --> 11:50.400
get back to 50.

11:50.420 --> 11:55.080
So here if we're in the global namespace we're going to look for things in the global namespace.

11:55.100 --> 11:59.750
So the first time that we print the value of the name x with the first line in the function body Python

11:59.750 --> 12:04.550
uses the value of the parameter declared in the main block above the function definition.

12:04.550 --> 12:10.780
Next we assign the value there x to 1000 and the name x is local to our function now.

12:10.790 --> 12:16.910
So when we change the value of x inside of that function the x defined in the main block remains unaffected.

12:16.910 --> 12:19.420
Now what I mean by main block is the X appear.

12:19.700 --> 12:24.440
So if that last statement what we're actually doing is we display the value of x as the find in that

12:24.440 --> 12:29.320
main block thereby confirming that it's actually been effected by this local assignment.

12:29.810 --> 12:35.090
Now let's say you are in a situation where within sight of a function you actually want to change the

12:35.090 --> 12:35.950
global x.

12:35.960 --> 12:39.520
So far it seems like you're only limited to changing the local x.

12:39.560 --> 12:45.380
What if you actually wanted this function to reach out to the global level and rename ex-secret to be

12:45.380 --> 12:46.670
1000.

12:46.670 --> 12:47.630
How can we do that.

12:47.900 --> 12:51.240
Well the way you can do that is with the global keyword call.

12:51.350 --> 12:57.170
Now as a quick know it's recommended that you try to avoid using the global keyword call because doing

12:57.170 --> 13:02.530
this if you have a really long line of code or a large file of code can really mess up your namespace.

13:02.540 --> 13:04.210
If you're not super careful about it.

13:04.250 --> 13:08.660
So again I'm showing it to you here but I don't recommend that you ever actually use the global name

13:08.870 --> 13:11.230
or global keyword unless you really have to.

13:11.270 --> 13:17.330
But basically what the global keyword does is it says hey I'm going to be using the global x when I

13:17.330 --> 13:22.940
call X here I want to actually reach out to that global namespace grab that X and then play around with

13:22.940 --> 13:24.170
it inside here.

13:24.170 --> 13:31.490
So if I say DPF func X and the Klare global x and we're actually going to not even take any input here

13:31.820 --> 13:38.450
we'll just say call the function grab x from the global namespace using that global keyword and then

13:38.450 --> 13:42.620
say x is equal to 1000

13:45.400 --> 13:56.620
then I'm going to save this in here what I'm going to do is say Prince before function call X is and

13:56.630 --> 14:01.300
then say Khama X and let's comment these two lines out for now.

14:01.340 --> 14:06.010
So all I'm doing here is I'm never act of only to find this function I'm never actually calling it I'm

14:06.020 --> 14:07.490
just saying exercycle to 50.

14:07.640 --> 14:11.750
So we would expect this to say print's before a function call x is equal to 50.

14:11.750 --> 14:18.570
So I run Python notes that pi and it says before function call x is equal to 50 now I'm going to call

14:18.840 --> 14:24.390
function and note here inside of this function on calling Global X which allows this function to reach

14:24.390 --> 14:32.720
the global namespace and grab that X then after this I'm going to copy and paste this here and then

14:32.720 --> 14:38.880
say after Save it run this.

14:39.240 --> 14:45.450
And note what happened it says before function call X is 50 after the function call X is 1000.

14:45.450 --> 14:52.020
So now with this global keyword I've been actually able to rename or redefine or re-assign something

14:52.020 --> 14:53.290
in the global namespace.

14:53.310 --> 14:58.200
So now the x 1000 is actually causing that effect to be permanent.

14:58.320 --> 15:03.440
Again if I do something like this comment this out and I just say x is equal to 1000.

15:03.450 --> 15:06.290
Then if I run this I get twice.

15:06.330 --> 15:08.340
X is equal to 50 x is equal to 50.

15:08.370 --> 15:13.700
So that global keyword allows you to reach out to the global namespace and actually clarify that.

15:13.710 --> 15:17.280
No I do want to reassign that global variable x.

15:17.310 --> 15:22.920
Again this can be really confusing if you end up having a bunch of global calls all over your pie script

15:22.920 --> 15:25.710
so it's recommended they try to avoid global.

15:25.740 --> 15:28.580
Instead what you should do is use return keywords.

15:28.620 --> 15:34.170
So if you actually want to send back an X you wouldn't want to say x is equal to 1000.

15:34.230 --> 15:41.700
You'd want to say x is equal to 1000 return X and then with that return statement you can use it in

15:41.700 --> 15:42.880
the global namespace.

15:43.050 --> 15:55.110
So then you would say something like x is equal to phunk and then run something like this.

15:55.150 --> 15:57.100
And here we get 51000.

15:57.280 --> 16:02.590
So this use of the return statement has pretty much the same effect as if we had the global keyword

16:02.770 --> 16:06.590
without any of the risk of accidentally redefining something the global space.

16:06.700 --> 16:12.860
OK so that's all we really need to discuss about scope in python we won't see such complicated examples

16:12.860 --> 16:13.930
and we're working with Django.

16:13.950 --> 16:17.310
But it is something I want you to be aware of as you continue to program.

16:17.350 --> 16:22.060
If you have any questions I definitely suggest you check out the part 1 scope that Paice group which

16:22.060 --> 16:25.690
has full notes and many more examples of what we covered here.

16:25.690 --> 16:29.050
Always feel free to post the Q&amp;A forums if anything confused you.

16:29.050 --> 16:31.690
Thanks everyone and I'll see you at the next lecture.
