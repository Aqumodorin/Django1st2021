WEBVTT

00:04.920 --> 00:12.030
Hello everyone and welcome to Part 3 O.P. Project Object Oriented Programming is fundamental to becoming

00:12.030 --> 00:13.340
a good Python programmer.

00:13.360 --> 00:17.640
And we're going to be using it so much in Jingo that it's great to get some extra practice by building

00:17.700 --> 00:23.100
a game will use object oriented programming to create the card game known as war.

00:23.100 --> 00:25.300
It's a very simple card game.

00:25.460 --> 00:31.790
The relevant file for this lecture is Part 3 O.P. project up PI and there's also a solution's file.

00:31.790 --> 00:35.660
Don't check the solutions file yet and leave attend to the project.

00:35.750 --> 00:40.730
Feel free to either treat this as a COTA long project where you just go straight to the solutions lecture

00:40.820 --> 00:42.410
and actually code along with me.

00:42.620 --> 00:44.630
But I do recommend that you attempt that on your own.

00:44.630 --> 00:49.840
First let's take a quick look at the actual project file which has some extra code to help you out.

00:49.880 --> 00:53.310
If you attempt to do this on your own I'll jump to my editor now.

00:53.480 --> 00:59.300
OK so here you have three opii project up-I file open and when you open this file you'll notice that

00:59.300 --> 01:01.010
there's a bunch of commented code.

01:01.010 --> 01:03.440
These are just the rules of the game war.

01:03.440 --> 01:05.830
If you haven't played war don't really know what it's about.

01:05.840 --> 01:10.900
You can read this to actually understand the rules or you can actually read the wikipedia link to war.

01:10.910 --> 01:15.650
The card game but the basic rules are very simple and the way we're going to do it for this project

01:15.650 --> 01:18.380
is you playing versus the computer.

01:18.380 --> 01:20.400
What's going to happen is you have a deck of cards.

01:20.420 --> 01:26.810
It gets split in half and half of its face down to you half of it is face down to the computer and you

01:26.810 --> 01:29.990
and the computer will flip one card face up at the same time.

01:30.020 --> 01:35.020
Whoever has the higher card wins both of those cards and that's the basic premise of war.

01:35.180 --> 01:40.820
But there is a special event that happens when both cards they pull face up happen to be equal to each

01:40.820 --> 01:41.830
other in rank.

01:41.870 --> 01:47.990
If that's the case then you and the computer pull out an extra three cards and then you pull out another

01:47.990 --> 01:53.270
card to actually compare to each other and then whoever wins that wins the war and then wins all those

01:53.270 --> 01:53.970
cards.

01:54.020 --> 01:55.660
So that would be all 10 cards.

01:56.690 --> 02:02.430
OK so then we want to scroll down here and we can see that I've imported some useful things for you

02:02.440 --> 02:08.230
so I've created already from random import shuffle and then we have two lists here that are really useful

02:08.230 --> 02:09.630
for creating cards.

02:09.700 --> 02:13.690
They're just lists that are created by splitting a string based on the whitespace so you can play around

02:13.750 --> 02:16.930
those you don't have to use them but they're there just to help you out.

02:16.930 --> 02:18.590
Now we have the deck class.

02:18.670 --> 02:22.280
The hand class the player class and then some game play.

02:22.540 --> 02:24.810
So what you're going to be doing is the following.

02:24.910 --> 02:30.160
You're going to be using this deck class and this object will create a deck of cards to initiate play

02:30.610 --> 02:34.930
and you can then use this deck list of cards to split in half and give to the players.

02:34.930 --> 02:39.300
It will also be able to use these two lists here to create the deck.

02:39.310 --> 02:43.950
It should also have a method for splitting and cutting the deck in half and shuffling deck.

02:43.960 --> 02:49.170
We also have the hand class and each player has a hand and they can add or remove cards from the hand

02:49.450 --> 02:54.880
and there should be an add or remove card method within this class that we have the player class and

02:54.880 --> 03:00.040
that takes in a name and an instance of a hand class object and the player can then play cards and check

03:00.040 --> 03:01.370
that they still have cards.

03:01.510 --> 03:05.370
And in Filey over here we'll have game play again.

03:05.430 --> 03:10.570
You don't actually have to use these three specific classes but you do have to use at least one class

03:10.630 --> 03:13.240
and use object oriented programming in some way.

03:13.450 --> 03:15.250
But this is just skeleton code here.

03:15.250 --> 03:19.170
Just some scaffolding free to fill out if you want to follow along with the solutions.

03:19.180 --> 03:23.790
OK best of luck and coming up next is the solution lecture where we will be coding along.

03:23.790 --> 03:25.020
Any example solution.

03:25.030 --> 03:27.310
Thanks everyone and I'll see at the next lecture.
