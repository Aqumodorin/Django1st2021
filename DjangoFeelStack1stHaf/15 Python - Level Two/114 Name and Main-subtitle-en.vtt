WEBVTT

00:05.080 --> 00:05.740
Hello everyone.

00:05.740 --> 00:07.030
Welcome to Part 7.

00:07.120 --> 00:13.740
Name and main and often confusing part of Python especially as you begin to learn about modules is this

00:13.740 --> 00:16.140
mysterious line of code that looks something like this.

00:16.320 --> 00:23.230
If name is equal to mean and then some code underneath it will sometimes importing from a module you

00:23.230 --> 00:27.850
would like to know whether modules function is being used as an import or if you're using the original

00:27.850 --> 00:29.740
dot py file of that module.

00:30.510 --> 00:32.090
Let's explore this some more.

00:32.130 --> 00:36.480
But make sure to check out the full explanatory text file that's in this parts folder.

00:36.480 --> 00:37.590
Let's get started.

00:37.980 --> 00:42.090
OK here I am at the editor and to get started I'm going to make two files.

00:42.090 --> 00:48.930
I will make a one up my file that's O and e that pi and I'm going to make another file that's called

00:48.930 --> 00:52.980
to that PI T w o p y.

00:52.980 --> 00:56.730
And then I can say a split left or split right.

00:56.790 --> 00:59.360
And then I can see them side by side.

00:59.400 --> 00:59.690
OK.

00:59.700 --> 01:03.670
So again as I mentioned sometimes when you're importing from a module you would like to know whether

01:03.670 --> 01:08.640
a module's function is being used as an import or if you're using the actual original DUP PI file.

01:08.640 --> 01:13.560
So as we saw before if I'm importing something from two into one and I run the one that up PI script

01:13.620 --> 01:18.910
I want to know did that function directly come from one or was it imported from two.

01:19.260 --> 01:23.320
And you can determine this by using the if name is equal to main statement.

01:23.430 --> 01:27.600
And when your script is run by passing it as a command to the Python interpreter such as we've done

01:27.600 --> 01:34.350
with Python notes that pi all of the code that is at the indentation level 0 gets executed in functions

01:34.350 --> 01:36.900
and classes that are defined are well-defined.

01:37.200 --> 01:39.190
But none of their code gets.

01:39.540 --> 01:41.050
Unlike other languages.

01:41.130 --> 01:44.110
There's no main function that gets run automatically.

01:44.130 --> 01:47.530
The main function is implicitly all the code at the top level.

01:47.700 --> 01:52.950
And in this case that top level code is that of an IF block and that's the if name is equal to main.

01:52.950 --> 01:55.850
So let's actually show this one going.

01:56.040 --> 02:01.400
In my one PI file say d f func.

02:01.510 --> 02:09.100
And here I will say Prince phunk in one pie and we can collapse that tree.

02:10.840 --> 02:19.490
And then I'm going to print top level one up high.

02:19.600 --> 02:19.930
What's

02:23.550 --> 02:29.170
And here I will say if and note that actually get this code automatically for me.

02:29.200 --> 02:35.680
So if I underscore underscore name underscore underscore is equal to and in string there main and then

02:35.680 --> 02:36.880
it says Execute main.

02:36.880 --> 02:48.100
But we're going to delete that for now and say print one up high is being run directly and then I can

02:48.100 --> 02:51.300
actually have an L statement with this as well.

02:51.310 --> 02:51.800
Else.

02:51.800 --> 02:54.620
Print 1.

02:54.670 --> 03:03.530
Pi is or has been imported.

03:03.730 --> 03:08.800
So I will save this and then into that pie and willing to write the following.

03:08.800 --> 03:15.350
I will say import one and then say Prince top level

03:18.720 --> 03:29.390
to that pi and then from one I will say call one that phunk and then I'll say if Again name is equal

03:29.390 --> 03:31.580
to mean Prince

03:34.350 --> 03:43.240
to that pi being run directly and then else and you don't often see an else but it can definitely work

03:43.240 --> 03:49.310
fine else we'll say 2 is being imported.

03:49.530 --> 03:53.190
In other well I'll just say is being imported.

03:53.450 --> 04:02.920
Now if we invoke the interpreter here with Python one PI and I hit enter no to say get back out top

04:02.920 --> 04:06.940
level 1 that PI one PI is being run directly.

04:07.050 --> 04:18.590
And if I run Python to that pi I get top level 1 that PI one that pi has been imported top level to

04:18.610 --> 04:27.510
the pi function one PI to that Pye's being run directly in all of this works because of this name.

04:27.610 --> 04:33.070
So this underscore underscore name underscore underscore is a built in variable which evaluates to the

04:33.070 --> 04:35.140
name of the current module.

04:35.140 --> 04:41.350
However like I mentioned if a module is being run directly as in the one PI or my script that PI kind

04:41.350 --> 04:45.250
of deal the name instead is being set to the string main.

04:45.280 --> 04:53.140
So whenever I run to that PI correctly then this variable name is set to equal mean when I run it directly

04:53.140 --> 04:53.850
here.

04:53.950 --> 04:58.150
And thus you can test whether or not your scripts being run directly or being imported by something

04:58.150 --> 04:58.900
else.

04:59.290 --> 04:59.590
OK.

04:59.620 --> 05:04.810
That's really all we wanted to get across here that if you ever see if name is equal to main It's basically

05:04.810 --> 05:10.810
a way of initiating the code in your main file but also checking to see if you're importing functions

05:10.810 --> 05:14.800
from another file or calling them directly from the file you're currently in.

05:14.800 --> 05:18.710
So if you ever see this phrase or this line of code don't be confused.

05:18.880 --> 05:24.850
A lot of times you'll see at the very bottom of that pie file and then all the main logic of the code

05:24.910 --> 05:28.920
will come here so often you'll see a bunch of functions in a file that says that pi.

05:29.110 --> 05:30.200
You get this line of code.

05:30.220 --> 05:34.810
Now you see a bunch of code logic that uses the functions and classes defined above it.

05:34.810 --> 05:37.030
So hopefully I'm not intimidated if you see it again.

05:37.030 --> 05:38.220
Definitely read the notes for this.

05:38.230 --> 05:43.630
But as far as this course concern that's really all you need to know the basics of how you can set this

05:43.630 --> 05:47.980
up to determine whether you're using something directly or importing it.

05:47.980 --> 05:49.780
Thanks everyone and I'll see you at the next lecture.
