WEBVTT

00:05.140 --> 00:08.620
Hello everyone and welcome back to a real left off last time.

00:08.620 --> 00:11.690
So last time we created the sample class it's very simple.

00:11.710 --> 00:13.430
It just has the past keyword.

00:13.720 --> 00:19.480
But really what we're going to have in classes are attributes and methods attributes are characteristics

00:19.480 --> 00:23.710
of an object methods or operations we can perform on the object.

00:23.710 --> 00:29.350
So for example what we will be doing is creating a class called Dog an attribute of a dog Maybe the

00:29.350 --> 00:35.740
dog's breed or the dog's pet name a method of a dog can be something like the bark method which will

00:35.740 --> 00:40.930
return a sound we can say Prince will fluff or something of that nature.

00:40.960 --> 00:43.300
So let's start off by learning about attributes.

00:43.450 --> 00:54.800
So I will make this class B dog and then let's change sample so be dog here and let's say instead of

00:55.680 --> 00:59.520
lowercase X we'll call this my dog.

00:59.540 --> 01:04.810
Kind of like the same way we created something called my list and they shut the type of my dog.

01:04.940 --> 01:08.400
So we'll save this run Python it's not pi.

01:08.440 --> 01:09.650
And here it can see class.

01:09.690 --> 01:10.600
Main dog.

01:10.600 --> 01:11.920
So far so good.

01:11.950 --> 01:18.100
So we you do is start off with attributes the syntax for creating an attribute is self datt the attribute

01:18.100 --> 01:19.960
name equals something.

01:20.140 --> 01:22.450
But there's a special method.

01:22.500 --> 01:27.600
So whenever you have a class where you're going to be doing is defining methods inside that class and

01:27.600 --> 01:30.690
the methods look like functions inside of a class.

01:31.020 --> 01:39.350
So we start off the DFA keyword and then a special method has a set of underscores surrounding its name.

01:39.580 --> 01:48.710
So we say underscore underscore in its underscore underscore then we passen self and then we can have

01:48.710 --> 01:51.770
a colon here and here I will just put in pass.

01:51.800 --> 01:57.530
So this is the most basic special method you can have the in its method and that stands for initialization

01:58.010 --> 02:00.890
and this self keyword is always necessary.

02:00.890 --> 02:07.790
Basically what the self keyword here does is it tells that this method refers to itself itself being

02:08.060 --> 02:09.670
the actual class object.

02:09.860 --> 02:13.900
So if we save this and run it we shouldn't see anything else different pop up.

02:13.940 --> 02:19.800
So we still have class dog who we're going to do now is inside this initialization method.

02:19.880 --> 02:25.220
In that method a member has two sets of underscores surrounding it defining it as a special method.

02:25.250 --> 02:28.180
What we do is we add more attributes.

02:28.190 --> 02:35.790
So for instance let's add an breed so dogs can have a breed and then what we do here is we have the

02:35.790 --> 02:37.540
syntax that looks like this.

02:37.620 --> 02:46.730
We say self daat breed is equal to breed and this is where it can get a little bit confusing.

02:46.730 --> 02:54.020
So what we will do is run this and we should expect an error to pop up and it will say in it missing

02:54.080 --> 03:00.410
one required a positional argument Breede which now means whenever I create an instance of a dog class

03:00.800 --> 03:03.650
I require Breede as an argument.

03:03.650 --> 03:06.140
So here we say Dog let's provide a breed.

03:06.170 --> 03:15.710
So we will say create a dog with the breed and we'll pass in a string called lab we save this run this

03:15.710 --> 03:16.310
again.

03:16.660 --> 03:22.190
And oh I see I have class main dog so we're going to do now is instead of printing the type of my dog

03:22.400 --> 03:31.330
since we know now that it's always going to be a dog class I'm going to say Prince my dog breed.

03:31.570 --> 03:34.800
And then if I run this notice I get back out.

03:34.800 --> 03:37.960
Lab and also note that they don't have close princes around breed.

03:38.040 --> 03:39.130
I don't have something like this.

03:39.130 --> 03:42.610
And that's because it's an attribute it's not a method I don't want to call it to action.

03:42.640 --> 03:47.580
I just want to report back what that attribute is.

03:47.620 --> 03:49.740
So let's break this all down one more time.

03:49.900 --> 03:54.730
We have that that method and it's called automatically right after the object has been created.

03:54.730 --> 03:59.090
So once we initialize the object we actually call this method automatically.

03:59.320 --> 04:05.140
And then each attribute in a class definition begins with a reference to the instance object and that

04:05.140 --> 04:11.360
by convention is this self keyword which is basically saying refer to this particular instance of this

04:11.390 --> 04:12.270
object.

04:12.520 --> 04:19.570
The breed here is the argument and the value is passed during the instantiation or initialization of

04:19.570 --> 04:23.080
the class itself where we say Breede is equal to Labbe here.

04:23.470 --> 04:26.100
And now we've created an instance of the dog class.

04:26.260 --> 04:36.950
So let's create one other instance we can say other Dogon is equal to dog breed equal to and I will

04:36.950 --> 04:46.130
say Huskie save that and then let's print out the other dog that breed save it.

04:46.310 --> 04:51.170
We run this and we see we have lab and husky come out.

04:51.330 --> 04:57.780
Now let's practice at adding one more attribute so angling to get rid of this other dog and we'll just

04:57.780 --> 05:01.530
stick with my dog get rid of this other dog as well.

05:02.620 --> 05:06.230
And this dog or dogs in general won't just have breeds.

05:06.250 --> 05:07.920
Let's say they have names.

05:08.010 --> 05:09.260
It is kind of like a pet name.

05:09.280 --> 05:17.320
So what we do for every attribute what we do is we say self dot in the name of that attribute is equal

05:17.320 --> 05:18.420
to name.

05:18.430 --> 05:25.390
And again what this is doing is it saying self which refers to this dog that name so the attribute name

05:25.600 --> 05:30.540
for this dog is equal to name which is going to be the name here.

05:30.790 --> 05:36.160
So again this name on the right hand side of the equal sign refers to the input name.

05:36.190 --> 05:43.140
This self-taught name is kind of assigning the name to the initialization of that dog.

05:43.150 --> 05:48.420
So now if I save this and try to run this I will get an error because I need to provide a name.

05:48.620 --> 05:52.240
So it says it is missing one required positional argument name.

05:52.370 --> 05:53.580
So let's give it a name.

05:55.590 --> 05:57.390
And we'll name this Sammy.

05:57.420 --> 05:59.760
Which is my real dog.

05:59.760 --> 06:08.570
Now if I run this I get lab and I can also print out my dog's name so I'll say my dog got name save

06:08.570 --> 06:09.740
this.

06:09.740 --> 06:12.890
Run it in I.S. lab and Sammy.

06:12.950 --> 06:18.370
And usually when creating an actual instance of an object you won't specify breed is equal to something

06:18.380 --> 06:22.720
name is equal to something else you want to really specifically target that.

06:22.820 --> 06:25.000
So you come back to your code and read.

06:25.010 --> 06:25.460
Oh yeah.

06:25.460 --> 06:28.040
Lab stands for breed Sammy stands for name.

06:28.190 --> 06:32.240
If you're really comfortable with an object and you tend to use it a lot we'll end up seeing something

06:32.240 --> 06:37.940
more along the lines of this where you just say lab and Sammy they have to go in the correct order to

06:37.940 --> 06:44.570
be assigned to breed and name but you'll most likely see in his saturation of an object look like that.

06:44.570 --> 06:46.550
And if I run this code I get back same thing.

06:46.580 --> 06:48.310
Lab and Sammy.

06:48.350 --> 06:48.700
All right.

06:48.770 --> 06:50.560
That's the very basics of attributes.

06:50.570 --> 06:53.270
Again if you have any questions feel free to post the Q&amp;A forums.

06:53.330 --> 06:57.860
But I also recommend that you check out the part two object oriented programming that pi which has a

06:57.860 --> 07:01.790
lot of notes and a lot of explanatory text for everything we're doing here.

07:02.000 --> 07:04.980
Next I want to talk about class object attributes.

07:05.210 --> 07:10.090
So class object attributes are always the same for any instance of the class.

07:10.100 --> 07:16.250
So for example for a particular dog you may have a different breed or you may have a different name.

07:16.250 --> 07:21.350
However all dogs are mammals regardless of their breed or regardless of their name they're always going

07:21.350 --> 07:22.440
to be a mammal.

07:23.400 --> 07:28.860
What we can do in that case is add what's known as a class object attribute and a class object attribute

07:29.250 --> 07:34.230
goes outside of any of these special methods or normal methods.

07:34.230 --> 07:39.830
At the very top so will say class object attribute to pointed out.

07:40.170 --> 07:47.800
And then I can say something like species is equal to mammal and if you study biology you know that

07:47.980 --> 07:50.580
species doesn't actually relate to mammal.

07:50.590 --> 07:53.620
It's more of the class of Somalia I believe.

07:53.710 --> 07:58.300
But cut me some slack here because I can't really use this class keyword so we'll just say species is

07:58.300 --> 08:02.140
equal to mammal regardless if that's biologically correct.

08:02.140 --> 08:04.210
All right so now I'm going to save this.

08:04.660 --> 08:07.020
I run this again and I see lab Samie.

08:07.030 --> 08:10.370
So no I haven't actually defined species equal to mammal here.

08:10.420 --> 08:16.550
That's taken as a class object attribute to be true regardless of what kind of dog I have.

08:16.750 --> 08:27.640
So whether it's a husky a lab regardless of what its name is if I say print my dog species I will get

08:27.640 --> 08:34.480
back mammal which makes sense regardless of whatever I want the breed or name to be this class object

08:34.480 --> 08:38.630
attribute will always be true to be equal to mammal OK.

08:38.760 --> 08:41.110
Now let's move on to actual methods.

08:41.220 --> 08:47.160
Methods are functions defined inside the body of a class they're used to perform operations with the

08:47.160 --> 08:53.100
attributes of our objects and methods are essential in encapsulation concepts of the object oriented

08:53.100 --> 08:54.320
programming paradigm.

08:54.360 --> 08:58.830
This is essential in dividing the responsibilities in programming especially in large applications and

08:58.830 --> 09:03.320
basically methods are kind of the whole point of view would want to even create your own object.

09:03.320 --> 09:09.870
So let's kind of Dilley Aldus and show you some more examples of how to create class not just of attributes

09:09.900 --> 09:11.890
but with methods themselves.

09:11.910 --> 09:20.470
So I will create a class and I will call it Circle class and I'm going to give it a class object attribute

09:21.550 --> 09:25.390
where pi is equal to three point 1 4.

09:25.390 --> 09:30.300
Now there are ways to call pi from the math library in Python but we'll just ignore that for now.

09:30.310 --> 09:36.340
We'll say that regardless of what kind of circle you have the PI that special number is always going

09:36.340 --> 09:40.250
to be equal to 3.1 for our estimated next.

09:40.270 --> 09:42.890
I'm going to create my initialization special method.

09:42.940 --> 09:44.240
You're always going to have this.

09:44.350 --> 09:50.950
So I'll say underscore underscore in it so initialize with self and every circle in order to be defined

09:51.040 --> 09:52.380
needs a radius.

09:52.630 --> 09:53.860
So will say radius.

09:53.860 --> 09:59.020
And if we want to be instantiated with a default parameter just like we could with a normal function

09:59.440 --> 10:01.390
I can say equals 1.

10:01.600 --> 10:08.050
Which means if I don't provide a radius I will provide the default value of 1 and since I have radius

10:08.050 --> 10:11.140
there I need a say self-taught radius.

10:11.140 --> 10:16.810
So self-taught radius which means the circle that radius is going to equal to the input radius.

10:18.750 --> 10:21.420
Now let's create an instance of circle we'll call it.

10:21.420 --> 10:24.550
My C is equal to circle.

10:24.600 --> 10:34.380
Close parentheses and then I'm going to print my C radius save that run our notes and we see here my

10:34.380 --> 10:36.800
radius is 1 perfect.

10:36.840 --> 10:42.150
OK so let's show an example of a method and remember that methods are functions defined inside the body

10:42.150 --> 10:43.170
of a class.

10:43.680 --> 10:49.680
And basically they're going to allow us to perform actions based off the attributes of the object.

10:49.770 --> 10:52.950
So let's create a method that calculates the area of a circle.

10:52.950 --> 10:57.100
We'll call it the f area and we need to pass in the keyword self.

10:57.150 --> 10:59.080
S E L F.

10:59.310 --> 11:04.320
And that basically tells this method area that it's not just some free floating function inside of this

11:04.320 --> 11:05.130
class.

11:05.130 --> 11:09.610
It's actually a method of that class and that's what the self keyword is doing.

11:11.050 --> 11:17.800
Then I'm going to calculate the area and remember that the area of a circle is just its radius squared

11:18.060 --> 11:23.330
so radius times radius times pi.

11:23.370 --> 11:25.320
Here's an issue if I just type this out.

11:25.320 --> 11:27.390
This is a common mistake that beginners make.

11:27.390 --> 11:30.460
They type radius times radius times pi and they think they are good to go.

11:30.690 --> 11:34.200
But the problem here is what radius are you talking about.

11:34.200 --> 11:37.850
Are you talking about the circles radius or some variable called radius.

11:37.860 --> 11:42.990
The way to make sure that you know you're talking about the circles own radius when you actually instantiate

11:42.990 --> 11:47.950
it is you need to say self-taught radius and that tells this method.

11:48.090 --> 11:53.760
Hey look at the objects current radius and call it self-taught radius and I need to do the same thing

11:53.760 --> 11:54.370
here.

11:54.930 --> 12:04.390
And then since pi is an object level attribute what I can do is say circle about pi and now if I say

12:04.450 --> 12:09.460
that let's create a circle my C with the radius equal to 3

12:12.260 --> 12:20.180
I save this run this I get back out as my output three which makes sense.

12:20.180 --> 12:25.850
Now let's see what happens if I call area and let's call area with no open and close princes just area

12:25.850 --> 12:28.440
like this and see what happens.

12:29.140 --> 12:31.750
I hit enter and I get an interesting line of output.

12:31.990 --> 12:39.160
I get that I have a bound method circle that area of main circle object at this kind of sequence of

12:39.250 --> 12:40.420
letters and numbers.

12:40.480 --> 12:47.380
What this actually means is this if I just call that area that is a method bound to the Circle class

12:47.950 --> 12:54.040
and it's a particular instance of the circle class object located at this position in my computer's

12:54.040 --> 12:54.890
memory.

12:55.360 --> 13:00.430
If I actually want to execute this method I need to just like I would for a function have a set of open

13:00.430 --> 13:02.140
and closed parentheses on it.

13:02.140 --> 13:08.350
Then when I run this code Qype on notes to apply I see here that my area is twenty eight point to six

13:08.530 --> 13:14.990
or estimated to be given that we're using three point for as our value of pi.

13:14.990 --> 13:19.860
Now let's imagine that I want to have a method that allows me to reset the radius.

13:20.090 --> 13:25.230
So there's two ways you can change attributes of a class in Python.

13:25.490 --> 13:29.050
One way is to just call it directly off the object itself.

13:29.270 --> 13:34.740
So we can say my C radius is now equal to.

13:34.980 --> 13:37.380
We'll put in 100 to make it really obvious.

13:37.550 --> 13:41.020
And then if I call my C area we'll get a different answer.

13:41.030 --> 13:48.350
So if I run Python this time I get thirty one thousand four hundred because I read the fine the radius.

13:48.350 --> 13:53.030
Sometimes you actually just want to have a method in order to read to find something like that so that

13:53.030 --> 13:54.830
it's really clear.

13:54.850 --> 14:05.580
So let's make a very simple method that says set radius l taken self and then it will take in some new

14:05.580 --> 14:11.020
parameter which will be something like New our.

14:11.100 --> 14:19.860
And then I will grab my current radius which is self-taught radius and of equal to new R and know that

14:19.860 --> 14:22.420
I'm not returning anything and that's OK.

14:22.440 --> 14:29.050
Now all object methods need to return something some object methods just affect the object in place.

14:29.840 --> 14:36.070
So now instead of saying my C equals my C that radius is equal to 100.

14:36.290 --> 14:44.120
What I can do is say I see the set radius and then pass in that new R-value 100 and this will just to

14:44.120 --> 14:47.290
show that this is working let's pasand something like 999.

14:48.240 --> 14:51.400
So when I run this I get some huge number here.

14:51.450 --> 14:55.650
So that's one way you can create methods that reset object attributes.

14:55.710 --> 15:01.740
It's sometimes more common to see mice the way we first thought they might see that radius is equal

15:01.740 --> 15:02.760
to something else.

15:02.760 --> 15:07.320
Sometimes depending if you have a really large file or you work with people that you really want to

15:07.320 --> 15:10.770
make sure they're doing things correctly you set it to a particular method.

15:10.770 --> 15:11.790
It's really up to you.

15:11.850 --> 15:13.760
That's more of a programming choice.

15:14.590 --> 15:17.290
Programming Style choice that is all right.

15:17.530 --> 15:23.230
So so far we've covered methods and attributes in the next section we're going to be covering inheritance

15:23.320 --> 15:27.480
of different objects and then we'll discuss some special methods.

15:27.520 --> 15:29.800
Thanks everyone and I'll see at the next lecture.

15:29.860 --> 15:33.490
Do you have any questions feel free to post the Q&amp;A forums and I'm happy to help you out.
