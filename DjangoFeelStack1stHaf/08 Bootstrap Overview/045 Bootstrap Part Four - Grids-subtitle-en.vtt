WEBVTT

00:05.020 --> 00:10.060
Hello everyone and welcome to part four of the bootstrap section of the course and this section of the

00:10.060 --> 00:16.610
course we'll discuss that traps grid system the grid system for bootstrap is one of its most fundamental

00:16.610 --> 00:22.550
features so far mostly seen just convenient tools that bootstrap provides through class calls and those

00:22.550 --> 00:26.240
are things such as calling those button classes in order to make sure they're shaped.

00:26.240 --> 00:31.400
Well we're calling classes on form inputs to make sure the spacing is correct that everything looks

00:31.400 --> 00:34.310
nice but the grid system goes much further than that.

00:35.140 --> 00:40.660
The grid system provides the core mechanism by which using bootstrap allows Web sites to look good across

00:40.660 --> 00:43.010
multiple devices and multiple screen sizes.

00:43.010 --> 00:47.780
And that's really one of the core purposes of bootstrap so that it looks good not just on your desktop

00:47.780 --> 00:51.420
and on your laptop your tablet your phone et cetera.

00:51.520 --> 00:55.840
Let's get sort of an explanation of the bootstrap grid system.

00:55.890 --> 01:00.900
So our fundamental question is what happens when we look at our Web site on different screen sizes whether

01:00.900 --> 01:03.670
it's a desktop or laptop a tablet or a phone.

01:03.720 --> 01:07.790
How do we reorganize our Web site so that it looks good across all of these devices.

01:08.850 --> 01:15.540
Well the bootstrap grid system has this fundamental idea will split the entire screen into 12 available

01:15.540 --> 01:17.970
columns that you can see here that are highlighted.

01:17.970 --> 01:23.610
You have these 12 basic available columns then you can use any combination of numbers that will eventually

01:23.610 --> 01:25.040
add up to 12 columns.

01:25.260 --> 01:31.320
So on that second row you see we have six by two columns on that second example.

01:31.320 --> 01:33.520
Example Number two we see four by three.

01:33.540 --> 01:35.420
Example Number three is the three by four.

01:35.550 --> 01:40.320
And then we see 2 by 6 so we can split up those two columns in any way we want and we can split them

01:40.320 --> 01:45.580
up unevenly so we could say eight on one side and four on the other or vice versa.

01:47.080 --> 01:50.400
The grid system call will make use of the class equal to.

01:50.410 --> 01:52.870
So we're going to see we're actually coding examples.

01:52.870 --> 01:57.050
This class is equal to Roekel and inside of a row class.

01:57.060 --> 01:59.730
We then have the following format and the format.

01:59.730 --> 02:03.410
The general format for a grid system is call dash.

02:03.420 --> 02:09.810
The screen size dashed a number of columns and the screen size dictates what screen size you're referring

02:09.810 --> 02:10.410
to.

02:10.710 --> 02:15.250
And there's a few basic screen sizes and there's actually a little bit of a difference in Bitstrips

02:15.280 --> 02:17.800
three and four in this aspect.

02:18.030 --> 02:22.860
But you can think of the screen sizes as basically things such as large medium small extra small.

02:23.010 --> 02:27.250
And now it's true for there's extra large but we'll get into that in just a second.

02:27.450 --> 02:32.490
And then the third argument is number of columns how many columns do you want to take up at this particular

02:32.490 --> 02:34.540
screen size.

02:34.550 --> 02:36.800
So for example we have a call like this.

02:36.830 --> 02:43.950
CIOL dash M.D dash 6 and that basically says when the screen size of a medium screen size and there's

02:43.970 --> 02:50.330
actual pixel amounts to quantitatively define what a medium screen size is I want this certain thing

02:50.420 --> 02:57.250
whatever's in this container to take up six columns or half of the available screen.

02:57.250 --> 02:57.510
All right.

02:57.520 --> 03:01.930
So we can define how the column should be shown when the screen gets resize and those are basically

03:01.930 --> 03:03.530
known as break points.

03:03.550 --> 03:08.410
So let's is sort of some examples where you have a browser open will be resizing or browser to see how

03:08.410 --> 03:09.600
the columns change.

03:09.730 --> 03:14.370
As you make the browser bigger or smaller kind of to emulate different device sizes.

03:14.450 --> 03:17.650
And we also see how we can account for that with our code.

03:17.650 --> 03:19.470
So I'm going to jump to my editor now.

03:19.840 --> 03:25.780
OK so here I am at my editor and heavenwards HTML document open and it's actually already linked to

03:26.200 --> 03:29.350
bootstraps DSS file online.

03:29.350 --> 03:35.530
First thing I want to do is actually add in some style calls so I can see the grid system and columns

03:35.530 --> 03:36.770
clearly.

03:36.790 --> 03:43.060
So one way that we would normally do this is linctus HVM document to a CSSA file but I can actually

03:43.870 --> 03:49.690
basically put a CSSA file inside as a team L by doing a style tag call and you don't have to worry about

03:49.690 --> 03:50.990
this media screen.

03:52.110 --> 03:58.340
We can just take that out and what we're going to do is basically just write CSSA here I'm going to

03:58.340 --> 04:05.180
make a class called bácsi so I'll have that bácsi there and I'm going to give anything in that class

04:05.270 --> 04:08.510
a background color of a light blue.

04:08.660 --> 04:11.230
So that's a hex code I found here.

04:11.240 --> 04:14.290
B 3 d d f f.

04:14.310 --> 04:21.810
So it's kind of a light blue color and then I want to give it a border of let's say a two pixel solid

04:21.840 --> 04:25.290
black border.

04:25.370 --> 04:25.890
All right.

04:26.150 --> 04:28.230
So we'll see how that comes into play in just a little bit.

04:28.250 --> 04:32.150
But that's basically going to be for visualization purposes doesn't have much to do if the actual grid

04:32.150 --> 04:33.630
system of bootstrap.

04:33.740 --> 04:40.750
So let's show you an example of using this bootstrap system for the grids Sugoi to make a container

04:40.750 --> 04:46.360
class and then I'm going to call a div that has the class row.

04:46.470 --> 04:51.940
And we're going to need that class row to actually do anything inside of a grid system.

04:52.200 --> 04:56.960
And then what I will do here is that in some divs inside of this.

04:57.270 --> 04:59.730
So have this class container class row.

04:59.940 --> 05:03.180
And then here I'm going to type C well.

05:03.440 --> 05:13.850
Large it's too large for the class that goes if this is going to be seal oil Elgie dash 4 and this is

05:13.850 --> 05:21.410
saying when the screen is a large screen and so that certain amount of pixels I want this whatever this

05:21.410 --> 05:27.260
is COSC large for to take up four of those 12 columns that are available to me.

05:27.710 --> 05:34.640
So I'm going to copy and paste this two more times because I have four plus four is a plus for us 12.

05:35.060 --> 05:37.010
So let's refresh this.

05:37.400 --> 05:45.600
And I can see now IFCO enl. for Siona large for so a large For it's actually see this a little better.

05:45.650 --> 05:48.260
What I'm going to do is tack on this bácsi class.

05:48.260 --> 05:51.170
They just made like this.

05:51.170 --> 05:57.470
And so now we can see that we can kind of tack on these classes and you actually saw that a lot with

05:57.500 --> 06:01.690
the nav bar lectures that there was these classes kind of tacked on.

06:01.880 --> 06:02.990
Well let's refresh this.

06:03.020 --> 06:05.750
And I can clearly see where the columns are.

06:05.750 --> 06:12.500
So I have four of the 12 columns taken up here for the 12 columns taken up here for the 12 here and

06:12.500 --> 06:15.040
this happens at a large screen.

06:15.110 --> 06:18.310
But what happens is I begin to expand the screen.

06:18.590 --> 06:25.490
Well nothing happens even at like an extra large size because this basically stands for for large and

06:25.550 --> 06:26.580
above.

06:26.900 --> 06:30.940
But what happens if I start shrinking this to below a large screen size.

06:31.100 --> 06:36.490
What happens if I hit a medium screen size boom.

06:36.490 --> 06:37.480
So look what happened here.

06:37.480 --> 06:42.460
Suddenly it all collapses and they're all just taking up all 12 columns that are all stacked on top

06:42.460 --> 06:43.500
of each other now.

06:44.100 --> 06:48.580
And that's something we're going to discover as we go along how we can actually fix this problem.

06:48.820 --> 06:52.380
Well it's not really a problem but how we can edit this to do whatever we want.

06:52.510 --> 06:55.300
Maybe we still wanted to have across the board.

06:55.300 --> 06:58.930
These three together even a smaller screen size.

06:58.930 --> 06:59.860
Well how would I do that.

07:01.260 --> 07:03.560
And let's explore through some more examples.

07:03.810 --> 07:07.290
So here we have this container class and let's change this.

07:07.290 --> 07:12.770
So we actually take up on medium size screens.

07:16.000 --> 07:20.700
Well let's do this sorry let's copy and paste this whole thing.

07:21.350 --> 07:23.060
Now let's add in something new.

07:23.060 --> 07:26.070
Right below this is where we can see him both on top of each other.

07:26.360 --> 07:35.260
So I'm going to delete this and I'm going to say instead of large all type M.D for medium and this will

07:35.260 --> 07:39.690
now say M.D.

07:39.790 --> 07:42.050
Now let's make these guys six.

07:42.130 --> 07:43.940
So there's two of them.

07:43.990 --> 07:54.920
We'll call this method six for medium meds six remedium you will save this let's expand this browser

07:54.920 --> 07:59.620
refresh the page and now I see my original three columns here.

07:59.630 --> 08:05.560
So large four large four large four and then two more column calls medium six medium six.

08:05.570 --> 08:08.690
So each of these is taking up six units of those columns.

08:08.930 --> 08:15.510
And now as I begin to shrink this I can see the collapse once I reach what's known as a medium screen

08:15.510 --> 08:16.130
size.

08:16.290 --> 08:18.420
The large ones have already collapsed.

08:18.420 --> 08:24.480
However the medium ones are still hanging on to their call there and it's only until I reach a small

08:24.480 --> 08:27.960
screen size that even the mediums now will collapse.

08:28.260 --> 08:36.260
So let's continue on this by putting in something smaller to be our class call of the grid system.

08:36.260 --> 08:42.290
So I will copy and paste these guys.

08:42.390 --> 08:48.020
And now it's put in something like extra small which is X s

08:51.180 --> 09:00.570
and I'm going to say extra small here when insects are small there save that.

09:00.990 --> 09:03.510
And we're going to expand this again refresh.

09:03.760 --> 09:09.740
And now I can see I have large for large for those medium columns an extra small 6 inch and let's see

09:09.800 --> 09:12.970
what happens as I begin to reach those break points.

09:12.980 --> 09:15.450
So here's the break point about to happen for medium.

09:15.590 --> 09:17.880
And we can see that medium has not been affected yet.

09:18.080 --> 09:22.910
Here's the break point for small about to be reached and we can see the extra small hasn't been affected

09:22.910 --> 09:23.330
yet.

09:23.600 --> 09:28.850
So as it keeps shrinking down we can see that extra small is still going to hang on him.

09:28.860 --> 09:31.010
In fact it's going to hang on all the way.

09:31.140 --> 09:36.240
So as I make this tiny This is basically the size of a cell phone string so small as my computer lets

09:36.240 --> 09:42.930
me go extra small has still contain this two column formation using six of those 12 on this side and

09:42.930 --> 09:45.210
six of those 12 on this side.

09:45.210 --> 09:45.470
All right.

09:45.480 --> 09:50.340
So now the question arises Well what do I do to account for different screen sizes.

09:50.340 --> 09:53.810
It seems like right now I can only account for one screen size.

09:53.810 --> 09:54.830
At the very end.

09:55.050 --> 10:01.080
Well you can actually just tack on classes together to make up for that so let me show you what I mean

10:01.080 --> 10:01.750
by that.

10:01.830 --> 10:06.090
You can just add in size classes to account for behavior at different sizes.

10:06.090 --> 10:13.930
So what I will do now is the following going to wups let's just delete one of these

10:17.040 --> 10:24.270
and let's have it be real world dash LG dash 3

10:27.010 --> 10:31.420
now we'll call this one.

10:32.730 --> 10:42.230
And then instead of just being three units on a large screen I'm going to have it be six units when

10:42.230 --> 10:50.490
it reaches a small screen and I'm going to copy and paste this in I'm going to make four of these.

10:50.610 --> 10:56.000
So we'll say one two three.

10:59.020 --> 11:03.350
Four and let's grab all these and comment them out.

11:04.450 --> 11:07.650
So we can just focus on what's happening with this guy.

11:08.590 --> 11:11.410
And this is example number four in the notes.

11:11.420 --> 11:17.700
So expand this refresh and here it can save one to three and four.

11:17.710 --> 11:19.170
And if we look back amazed him.

11:19.210 --> 11:22.750
I said whenever the screen is large.

11:22.900 --> 11:30.280
Each of these things should take up 3 units which makes sense to each taking up three because three

11:30.280 --> 11:32.440
times four is twelve here.

11:32.440 --> 11:37.460
And then once I reach small or smaller then they'll each take up six.

11:37.460 --> 11:38.840
So what actually happens here.

11:39.040 --> 11:43.900
Well Sister each can I have to take up six once they reached small then it gets split.

11:43.900 --> 11:48.590
So now one and two are taking up six and then three and four taking up six.

11:48.880 --> 11:53.400
And then as I continue going once I reach extra small the each take up one.

11:53.860 --> 11:57.580
So it only gets defined up to the small screen size you do.

11:57.580 --> 12:04.160
And if you keep breaking past that it's going to line them all up together to take up all 12.

12:04.170 --> 12:08.430
So at this point in the lecture what I would encourage you to do is really play around with these calls

12:08.430 --> 12:15.480
here and you can reference that documentation either on the new bootstrap for where there's basically

12:15.480 --> 12:20.250
an extra large screen size which you may or may not be able to realize the pinning on how big your screen

12:20.250 --> 12:26.010
it or you can just go to get bootstrapped that comp slash example slash Griots actually see examples

12:26.010 --> 12:26.340
of this.

12:26.350 --> 12:28.700
So here we can actually see some great examples.

12:28.770 --> 12:30.960
We have the three equal columns on medium.

12:30.960 --> 12:37.500
So this is about desktop to large desktops you can see three unequal columns of three six and three

12:37.950 --> 12:40.170
or two columns eight in a four.

12:40.290 --> 12:44.550
And here are just a bunch of examples that you can do as you explore.

12:44.550 --> 12:48.720
So what I would encourage you to do is come to this link get bootstrapped dot com slash example slash

12:48.720 --> 12:54.450
grid and actually play of these and see that you really understand how you can define a call as you

12:54.450 --> 12:56.650
resize your screen.

12:56.650 --> 13:02.870
OK so now that we've done that you may be wondering well prophy that is pretty restrictive for the phone

13:02.860 --> 13:06.370
to divide further beyond 12 units and that's actually really easy.

13:06.520 --> 13:09.460
All you have to do is Nest those rose calls.

13:09.820 --> 13:11.930
So let's comment this out.

13:14.350 --> 13:16.530
And actually do that so I'll make a new device.

13:16.550 --> 13:30.580
It's going to be Arrau and then I'm going to say div will say Class C O L dash LG 6 and we'll tack on

13:30.580 --> 13:31.900
the bácsi class there

13:37.560 --> 13:45.670
and then inside of this actually I'm going to make another div called class row.

13:45.710 --> 13:53.120
So here right now I'm only taking up half of the screen on large screens and then inside of this I create

13:53.120 --> 14:04.520
another class called row so I'm going to say class this will be call LG 6 bácsi and this is where I'll

14:04.520 --> 14:05.950
actually put in some content.

14:08.620 --> 14:11.600
And we'll call this next one.

14:11.850 --> 14:21.530
And let's make another one just like it's going to copy this and paste it and let's call it ness too.

14:22.110 --> 14:25.210
And then outside of this row class right here.

14:25.220 --> 14:31.950
So inside of this first one outside of this one I'm going to do is the following.

14:36.690 --> 14:39.230
And I think I misspoke for a second.

14:39.250 --> 14:41.910
So outside of all of this excuse me.

14:42.040 --> 14:52.040
So inside of this first initial row class but outside of all this I'm going to call a div and it's going

14:52.040 --> 15:04.900
to have the class C well dash Elgie dash 6 bácsi And let's give it a name like top level.

15:05.260 --> 15:09.560
So before we actually see what this looks like let's explain what's actually going on here.

15:09.580 --> 15:13.780
So this is in order to get more than just 12 units we can divide this further.

15:14.050 --> 15:17.190
So in calling the initial div classical Tarot.

15:17.260 --> 15:21.100
And that tells bootstrap OK we're going to be dealing with the grid system here.

15:21.300 --> 15:25.640
Then I call a class that says C O L.

15:25.690 --> 15:26.970
LG dash 6.

15:27.020 --> 15:31.840
Bácsi inside of that we've been usually just putting in our street content.

15:32.050 --> 15:36.230
In our case it's been text but a lot of times can be images links whatever you want to put in there.

15:36.550 --> 15:41.760
But inside of that instead of putting the content straight away I add in another class equal to row

15:42.160 --> 15:48.400
which basically means I'm taking up everything inside this LG dash 6 and putting in another 12 columns

15:48.400 --> 15:51.810
in there to play it with and then I'm splitting that in half.

15:51.850 --> 15:54.110
So there's going to be my next one ness too.

15:54.220 --> 15:55.480
And then there's my top level.

15:55.510 --> 16:00.000
So think about what you expect this to look like before you actually view it in your browser.

16:00.370 --> 16:02.300
OK so hopefully you thought about it.

16:02.560 --> 16:08.830
Let's take this make sure we save it expand our browser refresh.

16:08.830 --> 16:10.470
And here is what we see.

16:10.840 --> 16:17.520
We see nest 1 and nest 2 on the left hand side and then we see top level over on the right hand side.

16:17.530 --> 16:24.070
So what we ended up doing was we successfully nested these two in order to split them up and then we

16:24.070 --> 16:26.050
have our top level taking up the rest of it.

16:26.080 --> 16:31.720
And that's how you can go further than just these 12 units you can split up these units again and again

16:32.050 --> 16:35.720
using just nested classical to RHO calls.

16:36.120 --> 16:36.760
OK.

16:37.000 --> 16:42.700
So as a quick review of what we've been discussing remember the entire idea behind bootstrap is that

16:42.760 --> 16:49.540
this entire screen is split up into those 12 equal columns and then you can decide based off a screen

16:49.540 --> 16:54.260
size what you want to actually take up out of those 12 columns.

16:54.310 --> 17:00.280
So maybe when the screen is large if we look back at this example let me uncomment it will comment this

17:00.280 --> 17:02.780
one out and uncomment this one.

17:02.810 --> 17:07.090
So this one's probably the best example of how we actually used a grid system.

17:07.090 --> 17:09.800
So at a large grid size I would say use three here.

17:10.000 --> 17:16.440
But when it reaches small used six on each of them and you can change this to whatever you want.

17:16.440 --> 17:22.380
So again the basic idea behind grid systems and bootstrap is you define how many of those 12 columns

17:22.380 --> 17:24.980
you want to use that certain screen sizes.

17:25.290 --> 17:29.170
And that's basically going to account for the break point.

17:29.180 --> 17:29.530
All right.

17:29.550 --> 17:33.910
If you have any questions on this make sure you actually visit the documentation especially this layout

17:33.910 --> 17:37.290
page on the Butera for documentation.

17:37.280 --> 17:39.740
There's a lot more to it than what we've covered.

17:39.740 --> 17:44.170
There's like auto layout columns of equal with and there's a lot more you can do there.

17:44.210 --> 17:48.860
We won't be messing around with the grid system too often when we're building our actual web sites which

17:48.860 --> 17:51.280
is why we're not going to go into all of this.

17:51.290 --> 17:52.820
But it is all there for you.

17:52.820 --> 17:56.160
The documentation is pretty clear on what you can and can't do.

17:56.210 --> 17:58.120
And it's a really great resource for you.

17:58.250 --> 18:01.540
And also check out get bootstrap that complex example slushed grid.

18:01.700 --> 18:04.630
If you just want ideas for what you can actually do with it.

18:04.910 --> 18:06.540
OK thanks everyone.

18:06.560 --> 18:09.410
Again feel free to post the Kewney forums if you have any questions.

18:09.430 --> 18:11.920
But other than that I will see you at the next lecture.

18:12.030 --> 18:16.280
We're going to have a quick project to kind of wrap up everything we've been talking about bootstrap

18:16.280 --> 18:18.990
with thanks and I'll see you there.
